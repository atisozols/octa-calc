openapi: 3.0.1
info:
  version: '4'
  title: Payment Integration API
  x-summary: This is test summary
  x-logo:
    url: images/seb_logo.svg
  description: >
    API endpoint base URLs:

    - Production: <a href="https://payment.ecommerce.sebgroup.com/api"
    target="blank">https://payment.ecommerce.sebgroup.com/api</a>

    - Demo: <a href="https://igw-seb-demo.every-pay.com/api"
    target="blank">https://igw-seb-demo.every-pay.com/api</a>


    Visit the <a href="https://support.ecommerce.sebgroup.com"
    target="blank">Support Portal</a> for additional documentation.


    Your API username and API secret can be found in <a
    href="https://portal.ecommerce.sebgroup.com//merchant_settings/general"
    target="blank">Merchant portal/General settings</a>.

    # SEB E-commerce API


    Welcome to the SEB E-commerce API documentation, your comprehensive guide to
    seamlessly integrating SEB solution into your platform.

    This documentation equips you with all the necessary information to
    successfully integrate SEB E-commerce and provide your customers with a
    convenient and secure payment experience.


    The API is implemented in the REST architectural style:

    - payments and transactions are exposed as resources

    - operations on resources are performed using standard HTTP methods (GET,
    POST, etc.)

    - each request must specify a media type for the resource presentation
    format

    - error conditions on operations are expressed as HTTP response codes


    Payment gateway supports communication in JSON format. API format must be
    specified in the request HTTP header as follows:

    - Content-Type: `application/json`


    All connections to Payments Gateway are carried out over TLS connection.
    Merchant API client MUST validate the certificate of the Payment Gateway to
    avoid Man-in-the-Middle attacks on payment data.


    ## Overall Integration Process


    Integration with the SEB E-commerce API can be achieved through two primary
    methods: either by redirecting the customer to a hosted payment page
    featuring all available payment methods, or by displaying the available
    payment methods directly on the merchant's side and redirecting the customer
    to the selected method upon their choice.


    Here are the general steps for integration:

    - the Merchant initiates a payment via a Backend API request. Upon
    submission, the Payment Link, along with other necessary details, is
    returned

    - customers are then directed to either the general Payment Link, typically
    used for a hosted payment page, or a payment method-specific Payment Link if
    the selection is made on the merchant's side

    - upon reaching the hosted payment page, customers are presented with a
    range of available payment methods. They choose one and proceed through the
    payment flow, which may involve navigating multiple screens and redirects to
    third-party authentication services, depending on the chosen method. If
    payment method selection occurs on the Merchant's side, customers follow the
    payment flow accordingly

    - after the payment processing is finalized, a Callback notification is sent
    to the Merchant to query the payment status


    ## Important Factors


    ### Token Agreement

    For tokenization payments and follow up payments that includes token (CIT,
    MIT), API supports these token agreements:

    - Unscheduled - type of the agreement where both the amount and time period
    between payments can vary and cannot be defined at the time of agreement.
    Payment is usually triggered based on usage. This type of agreement is also
    used for future CIT payments

    - Recurring - these are payments for the delivery of ongoing goods or
    services. They have a fixed amount and interval for each payment, as
    established in the merchant customer agreement.


    **Note**: The token agreement for the initial tokenization payment and
    follow up payment that includes token (CIT, MIT) must match.


    ### Nonce

    All payment-related requests include a `nonce` parameter, which serves to
    verify the uniqueness of each request message. This measure effectively
    mitigates potential message replay attacks.


    ### Order Reference

    The primary role of the `order_reference` parameter is to link payments
    within the system to the appropriate order in the merchant's online store.
    By default, the system validates the uniqueness of the `order_reference`,
    allowing multiple payment attempts for a single order until one is
    successful.

    This process offers added security by ensuring that the `order_reference`
    matches and is unique within the merchant's online store, protecting against
    potential tampering attacks. However, if necessary, the validation for
    `order_reference` uniqueness can be disabled.

    When disabled, multiple successful payments can be made for the same
    `order_reference`.


    ### Date and Time Formats

    The `timestamp` parameter indicates the time at which the request was made.
    Requests with timestamps outside of a permitted time-window (±5 minutes)
    will be rejected. All datetime fields, including the timestamp, adhere to
    the ISO 8601 standard format, such as: `2023-12-05T10:27:32Z`.


    ## Callback Notification

    Callback notifications serve to update merchants about the status of
    payments. Once a payment is completed, either by the customer or
    automatically after initiation, a notification is sent to the merchant's
    designated Callback URL.

    To ensure receipt of these notifications, merchants are required to
    configure their Callback URL within the e-shop settings on the merchant
    portal.


    The Callback URL will include parameters like `payment_reference`,
    `order_reference`, and `event_name`. When the Callback is received, it
    indicates that the payment status has been updated. To retrieve payment
    information, merchants need to use the GET `/payments/:payment_reference`
    endpoint.

    The `event_name` parameter provides updates on payment status, fraud,
    disputes, and token changes.


    **Note**: When integrating, please don’t use `order_reference` parameter. We
    intend to remove it from callbacks in the upcoming API versions.


    Possible values for `event_name`:

    - `status_updated` - payment status is updated

    - `voided` - payment is cancelled

    - `refunded` - payment is refunded

    - `refund_failed` - open banking payment refund failed

    - `chargebacked` - payment is disputed by the cardholder, and the issuer
    bank initiates a chargeback process.

    - `marked_for_capture` - payment is marked for capture

    - `abandoned` - payment is abandoned and marked as failed

    - `issuer_reported_fraudulent` - payment is reported as fraudulent by the
    issuer

    - `merchant_reported_fraudulent` - payment is reported as fraudulent by the
    merchant

    - `dispute_opened` - dispute is opened

    - `dispute_updated` - dispute is updated

    - `dispute_reversed` - dispute is reversed

    - `dispute_charged_back` - dispute is charged back

    - `dispute_reopened` - dispute is reopened


    Possible values for instrument token updates:

    - `card_art_updated` - card art is received. Merchants can get the card art
    after this notification

    - `token_updated` - token status is updated by the issuer


    **Note**: If the initial callback notification doesn't reach the merchant's
    server, we'll keep trying to resend it until it's successfully delivered or
    until it fails permanently.

    We'll make up to 6 attempts, with intervals of 1 second, 5 minutes, 1 hour,
    24 hours, 48 hours, and 72 hours between each attempt.

    If the callback still fails after these attempts, it will be considered a
    permanent failure.


    ## Payment Statuses

    - **Initial** - this is the starting point of the payment process, where the
    merchant initiates the payment, but the payment method hasn't been selected
    yet. Customers are prompted to choose their preferred payment method and
    continue with the payment.

    - **Waiting for 3DS** -  for card payments when customer have entered the
    card details, pressed the “Pay” button, and waits to complete the 3D Secure
    Authentication.

    - **Waiting for SCA (Strong Customer Authentication)** - for open banking
    payments, the customer selects their IBAN, initiates the payment to the
    bank, and waits to complete Strong Customer Authentication (SCA).

    - **Sent for processing** - in this stage, the payment has been confirmed by
    the customer, but the final confirmation from the bank is pending. Depending
    on the merchant's preference, customers may be redirected back to the
    e-shop. Merchants should treat customer returns similarly to receiving a
    callback notification and continue to monitor payment status. Until the
    final status callback notification is received, customers should be informed
    that the payment is in progress.

    - **Abandoned** - this occurs when a customer doesn't complete the payment
    confirmation and abandons the process. For card payments, customers have 15
    minutes to complete 3DS authentication. If the time expires without
    authentication, the payment status changes to "Abandoned", indicating a
    failed payment.

    - **Failed** - this status indicates payment failure due to technical issues
    (either by us or the payment processor) or if the card issuer declines
    authorization. It is the final status of the payment.

    - **Settled** - for card payments, this signifies the settlement of the
    transaction, with funds transferred from the acquirer bank to the merchant's
    bank account. For open banking payments, settlement occurs after the
    customer completes SCA and the payment passes bank checks. This is the final
    state. For PayPal payments, it indicates completion of settlement to the
    merchant's PayPal account.

    - **Authorised** - this stage marks the initiation of payment, where the
    card issuer approves or declines card usage for a specific purchase
    transaction at a merchant. Successful authorization reserves the purchase
    amount on the cardholder's account. For 3DS payments, the authorization
    process includes cardholder authentication.

    - **Voided** - authorization cancellation. Voiding blocks funds transfer for
    an authorized payment. This is the final status of the payment.

    - **Refunded** - partial or full reimbursement of the payment.

    - **Charged Back** - initiated when the cardholder disputes the payment and
    the Issuer bank initiates a chargeback process.

    - **3DS Confirmed** - intermediate status indicating completion of the 3DS
    flow, but payment processing is halted due to technical errors.
  contact:
    name: Support
    email: support@every-pay.com
components:
  securitySchemes:
    merchantBasicAuth:
      description: >-
        Your API username and API secret can be found in <a
        href="https://portal.every-pay.eu/merchant_settings/general"
        target="blank">Merchant portal/General settings</a>
      type: http
      scheme: basic
    merchantMobileTokenAuth:
      description: >
        `mobile_access_token` that is returned if `mobile_payment=true` is sent
        in `/oneoff` request
      type: http
      scheme: bearer
      bearerFormat: Token
    acqBearerAuth:
      type: http
      scheme: bearer
      bearerFormat: Token
  schemas:
    API_V4_Entities_PaymentMethod:
      type: object
      properties:
        source:
          type: string
          description: >-
            Source of payment method. When building the UI for your customers
            and displaying available payment methods, treat this attribute as
            having no inherent meaning for your system. Since it can change,
            it's advisable to utilize `display_name`, `country_code`, and
            `logo_url` for this purpose
          example: card
        display_name:
          type: string
          description: Display name of payment method
          example: VISA/MasterCard
        country_code:
          type: string
          description: >-
            Country code for payment method, if applicable (to be used for
            better UX, e.g. group Open Banking payment methods by country)
          example: null
        payment_link:
          type: string
          description: >-
            Link to complete the payment with specific payment method
            (redirected directly to specific payment method)
          example: null
        logo_url:
          type: string
          description: Logo for payment method
          example: https://pay.every-pay.eu/assets/payment_methods/card.svg
        applepay_available:
          type: boolean
          description: Apple Pay for hosted page enabled
          example: true
        googlepay_available:
          type: boolean
          description: Google Pay for hosted page enabled
          example: true
        wallet_display_name:
          type: string
          description: Display name in wallet payment sheet
          example: Merchant
        agreements_supported:
          type: boolean
          description: Open banking payment method supports agreements
          example: true
    API_V4_Entities_PaymentOneoffResponse:
      type: object
      properties:
        account_name:
          type: string
          description: Processing Account ID of the Merchant sending the request
          example: EUR3D1
        order_reference:
          maxLength: 255
          type: string
          description: Merchant's order reference
          example: 84005a6c
        email:
          type: string
          description: Customer's email
          example: example@gmail.com
        customer_ip:
          type: string
          description: Customer's IP address
          example: 1.2.3.4
        customer_url:
          type: string
          description: >-
            URL where the Customer should be redirected after completing the
            payment
          example: https://example.com
        payment_created_at:
          type: string
          description: Time when the payment was initiated
          format: date-time
          example: '2023-12-05T10:27:32Z'
        initial_amount:
          type: number
          description: Amount used for the payment
          format: float
          example: 0.05
        standing_amount:
          type: number
          description: Payment standing amount
          format: float
          example: 0.05
        payment_reference:
          type: string
          description: Unique reference ID of the payment
          example: 0a887489dd023f1affd5dd0735a9766415c96d9314b738da8c7117e24216d62a
        payment_link:
          type: string
          description: >-
            Link to complete payment. Used when payment needs user action (fill
            card details, complete 3DS authentication, Open Banking payments
            etc.)
          example: https://pay.every-pay.eu/lp/x419d7/3HeCGV01
        payment_methods:
          type: array
          description: List of payment methods available for this payment
          items:
            $ref: '#/components/schemas/API_V4_Entities_PaymentMethod'
          example:
            - source: card
              applepay_custom_available: true
              applepay_merchant_identifier: 99383e83-7703-4aba-ad67-dbf96f9f02d9
              googlepay_custom_available: true
              display_name: VISA/MasterCard
              country_code: null
              payment_link: null
              logo_url: >-
                https://igw-demo.every-pay.com/assets/payment_methods/card-a66312a32bdfd28279262e4ad4713ead14d2a78549dff9213029e33f18672119.svg
              applepay_available: true
              googlepay_available: true
              wallet_display_name: Wallet payment
              tokenization_supported: true
              agreements_supported: false
            - source: lhv_ob_ee
              display_name: AS LHV Pank
              country_code: EE
              payment_link: null
              logo_url: >-
                https://igw-demo.every-pay.com/assets/payment_methods/seb-8099b005a2a78dab9b2002ee1d53da9f8960f78e5dbd4b19054daeef27819fcf.svg
              tokenization_supported: true
              agreements_supported: false
        api_username:
          type: string
          description: The API username of the Merchant sending the request
          example: a04e7ce1060e7024
        payment_state:
          type: string
          description: Current status of the payment
          example: initial
        mobile_access_token:
          type: string
          description: Mobile Access Token
          example: 83649881ba124d38d975d2add2e3809eb636688d
        currency:
          type: string
          description: Processing Account currency
          example: EUR
        applepay_merchant_identifier:
          type: string
          description: Apple Pay merchant ID
          example: 6ac51a7h-c1a3-5fxc-81m3-d611838560b2
        googlepay_merchant_identifier:
          type: string
          description: Google Pay merchant ID
          example: BDE1CM4vDPUGAOZ2
        descriptor_country:
          type: string
          description: Descriptor country code
          example: EE
      description: API_V4_Entities_PaymentOneoffResponse model
    API_ErrorResponse_400:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              description: Error code
              format: int32
              example: 4997
            message:
              type: string
              description: Error message
              example: The timestamp is not valid
      description: API_ErrorResponse400 model
    API_ErrorResponse_401:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              description: Error code
              format: int32
              example: 4999
            message:
              type: string
              description: Error message
              example: 401 Unauthorized
      description: API_ErrorResponse401 model
    API_V4_Entities_PaymentCitResponse:
      type: object
      properties:
        account_name:
          type: string
          description: Processing Account ID of the Merchant sending the request
          example: EUR3D1
        order_reference:
          maxLength: 255
          type: string
          description: Merchant's order reference
          example: 84005a6c
        email:
          type: string
          description: Cardholder's e-mail address
          example: example@gmail.com
        customer_url:
          type: string
          description: >-
            URL where the Customer should be redirected after completing the
            payment
          example: https://example.com
        payment_created_at:
          type: string
          description: Time when the payment was initiated
          format: date-time
          example: '2023-12-05T10:27:32Z'
        initial_amount:
          type: number
          description: Amount used for the payment
          format: float
          example: 0.05
        standing_amount:
          type: number
          description: Payment standing amount
          format: float
          example: 0.05
        payment_reference:
          type: string
          description: Unique reference ID of the payment
          example: 0a887489dd023f1affd5dd0735a9766415c96d9314b738da8c7117e24216d62a
        api_username:
          type: string
          description: The API username of the Merchant sending the request
          example: a04e7ce1060e7024
        payment_state:
          type: string
          description: Current status of the payment
          example: initial
      description: API_V4_Entities_PaymentCitResponse model
    API_V4_Entities_PaymentMitResponse:
      type: object
      properties:
        account_name:
          type: string
          description: Processing Account ID of the Merchant sending the request
          example: EUR3D1
        order_reference:
          maxLength: 255
          type: string
          description: Merchant's order reference
          example: 84005a6c
        email:
          type: string
          description: Cardholder's e-mail address
          example: example@gmail.com
        payment_created_at:
          type: string
          description: Time when the payment was initiated
          format: date-time
          example: '2023-12-05T10:27:32Z'
        initial_amount:
          type: number
          description: Amount used for the payment
          format: float
          example: 0.05
        standing_amount:
          type: number
          description: Payment standing amount
          format: float
          example: 0.05
        payment_reference:
          type: string
          description: Unique reference ID of the payment
          example: 0a887489dd023f1affd5dd0735a9766415c96d9314b738da8c7117e24216d62a
        api_username:
          type: string
          description: The API username of the Merchant sending the request
          example: a04e7ce1060e7024
        payment_state:
          type: string
          description: Current status of the payment
          example: initial
      description: API_V4_Entities_PaymentMitResponse model
    API_V4_Entities_PaymentChargeResponse:
      type: object
      properties:
        account_name:
          type: string
          description: Processing Account ID of the Merchant sending the request
          example: EUR3D1
        order_reference:
          maxLength: 255
          type: string
          description: Merchant's order reference
          example: 84005a6c
        email:
          type: string
          description: Cardholder's e-mail address
          example: example@gmail.com
        customer_ip:
          type: string
          description: Customer's IP address
          example: 1.2.3.4
        customer_url:
          type: string
          description: >-
            URL where the Customer should be redirected after completing the
            payment
          example: https://example.com
        payment_created_at:
          type: string
          description: Time when the payment was initiated
          format: date-time
          example: '2023-12-05T10:27:32Z'
        initial_amount:
          type: number
          description: Amount used for the payment
          format: float
          example: 0.05
        standing_amount:
          type: number
          description: Payment standing amount
          format: float
          example: 0.05
        payment_reference:
          type: string
          description: Unique reference ID of the payment
          example: 0a887489dd023f1affd5dd0735a9766415c96d9314b738da8c7117e24216d62a
        payment_link:
          type: string
          description: >-
            Link to complete payment if applicable (to complete 3DS
            authentication for CIT payments)
          example: https://pay.every-pay.eu/lp/x419d7/3HeCGV01
        api_username:
          type: string
          description: The API username of the Merchant sending the request
          example: a04e7ce1060e7024
        warnings:
          type: object
          description: Payment processing warnings in JSON format
          properties:
            transaction_attempts_cc_number_usage_frequency:
              type: string
              description: Warning example
              example: >-
                Card number has been used in transaction attempts more than
                maximum allowed: 5
            too_many_different_billing_addresses:
              type: string
              description: Warning example
              example: >-
                Too many different billing addresses has been used with the same
                card number!
        fraud_score:
          type: number
          description: Payment fraud score
          example: 500
        payment_state:
          type: string
          description: Current status of the payment
          example: waiting_for_3ds_response
        payment_method:
          type: string
          description: Payment method
          example: card
        cc_details:
          type: object
          description: >-
            Card details. It is mandatory to send for one-off payments, that is
            available for PCI DSS Compliant merchants
          properties:
            token:
              type: string
              description: Token which is used in the payment (alphanumeric, 24 characters)
              example: bd7bc8e61b2g3f5831k0c2m9
            bin:
              type: string
              description: First six digits of the card number, numeric string (6 digits)
              example: 516883
            last_four_digits:
              type: string
              description: Last four digits of the card number, numeric string (4 digits)
              example: 3438
            month:
              type: string
              description: Card expiration month, numeric string (values 1 - 2 digits)
              example: 12
            year:
              type: string
              description: Card expiration year, numeric string (YYYY format- 4 digits)
              example: 2025
            holder_name:
              type: string
              description: Name on card, only letters
              example: John Doe
            type:
              type: string
              description: Card type. Possible values are 'visa' or 'master_card'
              example: master_card
            issuer_country:
              type: string
              description: Card issuer country. ISO 3166 two-letter (alpha-2) format
              example: EE
            issuer:
              type: string
              description: Card issuing organization
              example: AS LHV Pank
            cobrand:
              type: string
              description: Name of the cobrand
              example: Partner deebet
            funding_source:
              type: string
              description: Funding source of the card (debit or credit)
              example: Debit
            product:
              type: string
              description: Product type of the card
              example: MDS -Debit MasterCard
            state_3ds:
              type: string
              description: 3DS state of the transaction
              example: no3ds
            authorisation_code:
              type: string
              description: Authorisation code of the transaction
              example: 228349
      description: API_V4_Entities_PaymentChargeResponse model
    API_ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              description: Error code
              format: int32
              example: 4997
            message:
              type: string
              description: Error message
              example: 'Validation failed: token is missing'
      description: API_ErrorResponse model
    API_V4_Entities_PaymentMethodStatus:
      type: object
      properties:
        source:
          type: string
          description: Source of payment method
          example: card
        display_name:
          type: string
          description: Display name of payment method
          example: VISA/MasterCard
        country_code:
          type: string
          description: >-
            Country code for payment method, if applicable (to be used for
            better UX, e.g. group Open Banking payment methods by country)
          example: EE
        payment_link:
          type: string
          description: >-
            Link to complete the payment with specific payment method
            (redirected directly to specific payment method)
          example: https://pay.every-pay.eu/lp/x419d7/3HeCGV01?method_source=card
        logo_url:
          type: string
          description: Logo for payment method
          example: https://pay.every-pay.eu/assets/payment_methods/card.svg
        applepay_available:
          type: boolean
          description: Apple Pay for hosted page enabled
          example: true
        googlepay_available:
          type: boolean
          description: Google Pay for hosted page enabled
          example: true
        wallet_display_name:
          type: string
          description: Display name in wallet payment sheet
          example: Merchant
        tokenization_supported:
          type: boolean
          description: Payment method supports tokenization
          example: true
    API_V4_Entities_ProcessingError:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: integer
          description: Error code
          format: int32
          example: 4999
        message:
          type: string
          description: Error message
          example: Unexpected error
    API_V4_Entities_PaymentStatusResponse:
      type: object
      properties:
        account_name:
          type: string
          description: Processing Account ID of the Merchant sending the request
          example: EUR3D1
        order_reference:
          maxLength: 255
          type: string
          description: Merchant's order reference
          example: 84005a6c
        email:
          type: string
          description: Customer's email
          example: example@gmail.com
        customer_ip:
          type: string
          description: Customer's IP address
          example: 1.2.3.4
        customer_url:
          type: string
          description: >-
            URL where the Customer should be redirected after completing the
            payment
          example: https://example.com
        payment_created_at:
          type: string
          description: Time when the payment was initiated
          format: date-time
          example: '2023-12-05T10:27:32Z'
        initial_amount:
          type: number
          description: Amount used for the payment
          format: float
          example: 0.05
        standing_amount:
          type: number
          description: Payment standing amount (after refund, void)
          format: float
          example: 0.01
        payment_reference:
          type: string
          description: Unique reference ID of the payment
          example: 0a887489dd023f1affd5dd0735a9766415c96d9314b738da8c7117e24216d62a
        payment_link:
          type: string
          description: >-
            Link to complete payment. Used when payment needs user action (fill
            card details, complete 3DS authentication, Open Banking payments
            etc.)
          example: https://pay.every-pay.eu/lp/reference
        payment_methods:
          type: array
          description: List of payment methods available for this payment
          items:
            $ref: '#/components/schemas/API_V4_Entities_PaymentMethodStatus'
        api_username:
          type: string
          description: The API username of the Merchant sending the request
          example: a04e7ce1060e7024
        warnings:
          type: object
          description: Payment processing warnings in JSON format
          properties:
            transaction_attempts_cc_number_usage_frequency:
              type: string
              description: Warning example
              example: >-
                Card number has been used in transaction attempts more than
                maximum allowed: 5
            too_many_different_billing_addresses:
              type: string
              description: Warning example
              example: >-
                Too many different billing addresses has been used with the same
                card number!
        processing_error:
          $ref: '#/components/schemas/API_V4_Entities_ProcessingError'
        stan:
          type: string
          description: Payment STAN number
          example: '1234'
        fraud_score:
          type: string
          description: Payment fraud score
          example: 500
        payment_state:
          type: string
          description: Current status of the payment
          example: settled
        payment_method:
          type: string
          description: Payment method
          example: card
        trace_id:
          type: string
          description: >-
            Unique identifier used to track related transactions, specifically
            referring to the initial approved tokenization transaction. The
            parameter can be returned only for PCI DSS compliant merchants
          example: MCC000KJS0932
        cc_details:
          type: object
          description: Details of card payment
          properties:
            token:
              type: string
              description: Token which is used in the payment (alphanumeric, 24 characters)
              example: bd7bc8e61b2g3f5831k0c2m9
            bin:
              type: string
              description: First six digits of the card number, numeric string (6 digits)
              example: 516883
            last_four_digits:
              type: string
              description: Last four digits of the card number, numeric string (4 digits)
              example: 3438
            month:
              type: string
              description: Card expiration month, numeric string (values 1 - 2 digits)
              example: 12
            year:
              type: string
              description: Card expiration year, numeric string (YYYY format- 4 digits)
              example: 2025
            holder_name:
              type: string
              description: Name on card, only letters
              example: John Doe
            type:
              type: string
              description: Card type. Possible values are 'visa' or 'master_card'
              example: master_card
            issuer_country:
              type: string
              description: Card issuer country. ISO 3166 two-letter (alpha-2) format
              example: EE
            issuer:
              type: string
              description: Card issuing organization
              example: AS LHV Pank
            cobrand:
              type: string
              description: Name of the cobrand
              example: Partner deebet
            funding_source:
              type: string
              description: Funding source of the card (debit or credit)
              example: Debit
            product:
              type: string
              description: Product type of the card
              example: MDS -Debit MasterCard
            state_3ds:
              type: string
              description: 3DS state of the transaction
              example: no3ds
            authorisation_code:
              type: string
              description: Authorisation code of the transaction
              example: 228349
        ob_details:
          type: object
          description: Details of Open Banking payment
          properties:
            debtor_iban:
              type: string
              description: >-
                Customer IBAN which money is taken from (in case of SEPA
                payments)
              example: EE717700771001735865
            creditor_iban:
              type: string
              description: Merchant IBAN which money is sent to
              example: EE168938346545967075
            ob_payment_reference:
              type: string
              description: Reference of the payment in the bank
              example: 8c12c621-8746-47a2-93cd-b2f565ud8564
            ob_payment_state:
              type: string
              description: State of the payment in the bank
              example: ACSC
            token:
              type: string
              description: Token which is used in the payment (alphanumeric, 24 characters)
              example: bd7bc8e61b2g3f5831k0c2m9
        transaction_time:
          type: string
          description: Transaction creation timestamp
          format: date-time
          example: '2023-12-07T08:38:27.266Z'
        sca_exemption:
          type: string
          description: SCA Exemption
          example: MIT
        detailed_fraud_check_results:
          type: object
          description: >-
            When parameter "detailed" is set "true" it gives list of all enabled
            fraud rules, their settings and scores regardless whether the rule
            was triggered or not (equivalent of "Fraud Check Results" in
            Merchant portal payment details page)
        acquiring_completed_at:
          type: string
          description: >-
            Date, time when payment acquiring was completed and funds received
            to merchant's account. Available only if the acquiring bank supports
            this functionality
          example: '2023-12-07 08:39:11'
      description: API_V4_Entities_PaymentStatusResponse model
    API_V4_Entities_PaymentRefundResponse:
      type: object
      properties:
        api_username:
          type: string
          description: The API username of the Merchant sending the request
          example: a04e7ce1060e7024
        initial_amount:
          type: number
          description: Amount used for the payment
          format: float
          example: 0.05
        standing_amount:
          type: number
          description: Payment standing amount (after refund)
          format: float
          example: 0.01
        payment_reference:
          type: string
          description: Unique reference ID of the payment
          example: 0a887489dd023f1affd5dd0735a9766415c96d9314b738da8c7117e24216d62a
        transaction_time:
          type: string
          description: Transaction creation timestamp
          format: date-time
          example: '2023-12-07T08:38:27.266Z'
        payment_state:
          type: string
          description: Current status of the payment
          example: refunded
        transaction_reference:
          type: string
          description: Refund transaction reference
          example: 0b906527ed031c2bcvb6bd1867n6894323m67r8254t853ba9h8377v29385m94m
      description: API_V4_Entities_PaymentRefundResponse model
    API_V4_Entities_PaymentCaptureResponse:
      type: object
      properties:
        api_username:
          type: string
          description: The API username of the Merchant sending the request
          example: a04e7ce1060e7024
        initial_amount:
          type: number
          description: Amount used for the payment
          format: float
          example: 0.05
        standing_amount:
          type: number
          description: Payment standing amount
          format: float
          example: 0.05
        payment_reference:
          type: string
          description: Unique reference ID of the payment
          example: 0a887489dd023f1affd5dd0735a9766415c96d9314b738da8c7117e24216d62a
        transaction_time:
          type: string
          description: Transaction creation timestamp
          format: date-time
          example: '2023-12-07T08:38:27.266Z'
        payment_state:
          type: string
          description: Current status of the payment
          example: settled
      description: API_V4_Entities_PaymentCaptureResponse model
    API_V4_Entities_PaymentVoidResponse:
      type: object
      properties:
        api_username:
          type: string
          description: The API username of the Merchant sending the request
          example: a04e7ce1060e7024
        payment_reference:
          type: string
          description: Unique reference ID of the payment
          example: 0a887489dd023f1affd5dd0735a9766415c96d9314b738da8c7117e24216d62a
        transaction_time:
          type: string
          description: Transaction creation timestamp
          format: date-time
          example: '2023-12-07T08:38:27.266Z'
        payment_state:
          type: string
          description: Current status of the payment
          example: voided
      description: API_V4_Entities_PaymentVoidResponse model
    API_V4_Entities_ShopResponseCommon:
      type: object
      properties:
        id:
          type: integer
          description: Unique ID of the shop
          format: int32
          example: 5712
        url:
          type: string
          description: URL of the shop
          example: https://example.com
        descriptor:
          type: string
          description: Descriptor of the shop
          example: example.com
        mcc:
          type: string
          description: Merchant category code of the shop
          example: '5999'
    API_V4_Entities_ShopResponse:
      type: object
      properties:
        api_username:
          type: string
          description: The API username of the Merchant sending the request
          example: a04e7ce1060e7024
        shops:
          type: array
          description: List of shops available for this merchant
          items:
            $ref: '#/components/schemas/API_V4_Entities_ShopResponseCommon'
      description: API_V4_Entities_ShopResponse model
    API_V4_Entities_ProcessingAccountResponseCommon:
      type: object
      properties:
        account_name:
          type: string
          description: Processing account name
          example: EUR3D1
        pre_authorisation:
          type: boolean
          description: Type of authorisation, pre or final authorisation
          example: false
        currency:
          type: string
          description: Currency of the processing account
          example: EUR
        support_3ds:
          type: boolean
          description: It shows if the processing account supports 3DS authentication
          example: true
        capture_delay_days:
          type: string
          description: It shows the delay days for automatic capture of the transaction
          example: 0
    API_V4_Entities_ShopInfoResponse:
      type: object
      properties:
        id:
          type: integer
          description: Unique ID of the shop
          format: int32
          example: 5712
        url:
          type: string
          description: URL of the shop
          example: https://example.com
        descriptor:
          type: string
          description: Descriptor of the shop
          example: example.com
        mcc:
          type: string
          description: Merchant category code of the shop
          example: '5999'
        api_username:
          type: string
          description: The API username of the Merchant sending the request
          example: a04e7ce1060e7024
        processing_accounts:
          type: array
          description: List of processing accounts available for this shop
          items:
            $ref: >-
              #/components/schemas/API_V4_Entities_ProcessingAccountResponseCommon
      description: API_V4_Entities_ShopInfoResponse model
    API_V4_Entities_PaymentMethodProcessingAccounts:
      type: object
      properties:
        source:
          type: string
          description: >-
            Source of payment method. When building the UI for your customers
            and displaying available payment methods, treat this attribute as
            having no inherent meaning for your system. Since it can change,
            it's advisable to utilize `display_name`, `country_code`, and
            `logo_url` for this purpose
          example: card
        display_name:
          type: string
          description: Display name of payment method
          example: VISA/MasterCard
        country_code:
          type: string
          description: >-
            Country code for payment method, if applicable (to be used for
            better UX, e.g. group Open Banking payment methods by country)
          example: EE
        payment_link:
          type: string
          description: >-
            Link to complete the payment with specific payment method
            (redirected directly to specific payment method)
          example: null
        logo_url:
          type: string
          description: Logo for payment method
          example: https://pay.every-pay.eu/assets/payment_methods/card.svg
        applepay_available:
          type: boolean
          description: Apple Pay for hosted page enabled
          example: true
        googlepay_available:
          type: boolean
          description: Google Pay for hosted page enabled
          example: true
        wallet_display_name:
          type: string
          description: Display name in wallet payment sheet
          example: Merchant
        googlepay_custom_available:
          type: boolean
          description: Google Pay for custom domain enabled
          example: true
        applepay_custom_available:
          type: boolean
          description: Apple Pay for custom domain enabled
          example: true
        tokenization_supported:
          type: boolean
          description: Payment method supports tokenization
          example: true
        agreements_supported:
          type: boolean
          description: Open banking payment method supports agreements
          example: true
    API_V4_Entities_ProcessingAccountResponse:
      type: object
      properties:
        account_name:
          type: string
          description: Processing account name
          example: EUR3D1
        pre_authorisation:
          type: boolean
          description: Type of authorisation, pre or final authorisation
          example: false
        currency:
          type: string
          description: Currency of the processing account
          example: EUR
        support_3ds:
          type: boolean
          description: It shows if the processing account supports 3DS authentication
          example: true
        capture_delay_days:
          type: string
          description: It shows the delay days for automatic capture of the transaction
          example: 0
        api_username:
          type: string
          description: The API username of the Merchant sending the request
          example: a04e7ce1060e7024
        payment_methods:
          type: array
          description: List of payment methods available for this processing account
          items:
            $ref: >-
              #/components/schemas/API_V4_Entities_PaymentMethodProcessingAccounts
          example:
            - source: card
              applepay_custom_available: true
              applepay_merchant_identifier: 99383e83-7703-4aba-ad67-dbf96f9f02d9
              googlepay_custom_available: true
              display_name: VISA/MasterCard
              country_code: null
              payment_link: null
              logo_url: >-
                https://igw-demo.every-pay.com/assets/payment_methods/card-a66312a32bdfd28279262e4ad4713ead14d2a78549dff9213029e33f18672119.svg
              applepay_available: true
              googlepay_available: true
              wallet_display_name: Wallet payment
              tokenization_supported: true
              agreements_supported: false
            - source: lhv_ob_ee
              display_name: AS LHV Pank
              country_code: EE
              payment_link: null
              logo_url: >-
                https://igw-demo.every-pay.com/assets/payment_methods/lhv-fc22e38aa5a9d1a127c14daa264a4c642aa9f3320d186bedcb14d96b91920446.svg
              tokenization_supported: true
              agreements_supported: false
      description: API_V4_Entities_ProcessingAccountResponse model
    API_V4_Entities_CardDetailsResponse:
      type: object
      properties:
        payment_state:
          type: string
          description: Current status of the payment
          example: waiting_for_3ds_response
        processing_errors:
          type: string
          description: List of errors that prevented processing icluding validation
          example: null
      description: API_V4_Entities_CardDetailsResponse model
    API_V4_Entities_AgreementPostResponse:
      type: object
      properties:
        account_name:
          type: string
          description: Processing Account ID of the Merchant sending the request
          example: EUR3D1
        order_reference:
          maxLength: 255
          type: string
          description: Merchant's order reference
          example: 84005a6c
        email:
          type: string
          description: Customer's email
          example: example@gmail.com
        customer_ip:
          type: string
          description: Customer's IP address
          example: 1.2.3.4
        customer_url:
          type: string
          description: >-
            URL where the Customer should be redirected after completing the
            payment
          example: https://example.com
        created_at:
          type: string
          description: Time when the agreement was initiated at Payment Gateway
          format: date-time
          example: '2023-12-05T10:27:32Z'
        agreement_reference:
          type: string
          description: Unique reference ID of the agreement
          example: 0a887489dd023f1affd5dd0735a9766415c96d9314b738da8c7117e24216d62a
        payment_link:
          type: string
          description: Link to complete agreement
          example: https://pay.every-pay.eu/lp/x419d7/3HeCGV01
        payment_methods:
          type: array
          description: >-
            List of available payment methods. Merchants can use these instead
            of `payment_link` to offer custom UI inside e-shop. These methods
            are returned together with `payment_link`
          items:
            $ref: '#/components/schemas/API_V4_Entities_PaymentMethod'
          example:
            - source: lhv_ob_ee
              display_name: AS LHV Pank
              country_code: EE
              payment_link: null
              logo_url: >-
                https://igw-demo.every-pay.com/assets/payment_methods/seb-8099b005a2a78dab9b2002ee1d53da9f8960f78e5dbd4b19054daeef27819fcf.svg
              tokenization_supported: true
              agreements_supported: false
        api_username:
          type: string
          description: The API username of the Merchant sending the request
          example: a04e7ce1060e7024
        agreement_state:
          type: string
          description: Current status of the agreement
          example: initial
        frequency:
          type: string
          description: The frequency of the recurring instructed payments
          example: monthly
        start_date:
          type: string
          description: >-
            The date in the future when the first instructed payment will be
            released
          example: '2024-10-30'
        end_date:
          type: string
          description: >-
            The last date in the future when the last instructed payment will be
            released. If not included then its a infinitely standing order
          example: '2030-10-30'
      description: API_V4_Entities_PaymentOneoffResponse model
    API_V4_Entities_AgreementStatusResponse:
      type: object
      properties:
        account_name:
          type: string
          description: Processing Account ID of the Merchant sending the request
          example: EUR3D1
        order_reference:
          maxLength: 255
          type: string
          description: Merchant's order reference
          example: 84005a6c
        email:
          type: string
          description: Customer's email
          example: example@gmail.com
        customer_ip:
          type: string
          description: Customer's IP address
          example: 1.2.3.4
        customer_url:
          type: string
          description: >-
            URL where the Customer should be redirected after completing the
            payment
          example: https://example.com
        signed_at:
          type: string
          description: Time when the agreement was signed by the PSU
          format: date-time
          example: '2023-12-05T10:27:32Z'
        agreement_created_at:
          type: string
          description: Time when the agreement was initiated
          format: date-time
          example: '2023-12-05T10:27:32Z'
        transaction_time:
          type: string
          description: Transaction creation timestamp
          format: date-time
          example: '2023-12-07T08:38:27.266Z'
        fraudulent_at:
          type: string
          description: Timestamp when the agreement was flagged as fraudulent
          format: date-time
          example: '2023-12-07T08:38:27.266Z'
        fraudulent:
          type: boolean
          description: >-
            Boolean representing if the agreement is flagged as being fraudulent
            or not
          example: false
        fraud_score:
          type: string
          description: Agreement fraud score
          example: 0
        type:
          type: string
          description: The type of the Agreement
          example: ob_periodic_payment
        deletable:
          type: boolean
          description: >-
            Boolean representing the property of an agreement to be canceled via
            the DELETE `/agreements/agreement_reference` endpoint
          example: true
        agreement_reference:
          type: string
          description: Unique reference ID of the agreement
          example: 0a887489dd023f1affd5dd0735a9766415c96d9314b738da8c7117e24216d62a
        payment_link:
          type: string
          description: Link to complete agreement
          example: https://pay.every-pay.eu/lp/x419d7/3HeCGV01
        api_username:
          type: string
          description: The API username of the Merchant sending the request
          example: a04e7ce1060e7024
        processing_error:
          $ref: '#/components/schemas/API_V4_Entities_ProcessingError'
        stan:
          type: string
          description: Payment STAN number
          example: '1234'
        agreement_state:
          type: string
          description: Current status of the agreement
          example: signed
        details:
          type: object
          description: Details of the Agreement
          properties:
            billing_city:
              type: string
              description: Billing address city
              example: Tallinn
            billing_country:
              type: string
              description: Billing address country.
              example: EE
            billing_postcode:
              type: string
              description: Billing address postal code
              example: 10145
            billing_state:
              type: string
              description: Billing address state
              example: EE-37
            billing_address:
              type: string
              description: Billing address
              example: EE-37
            shipping_city:
              type: string
              description: Shipping address city
              example: Tallinn
            shipping_country:
              type: string
              description: Shipping address country.
              example: EE
            shipping_postcode:
              type: string
              description: Shipping address postal code
              example: 10145
            shipping_state:
              type: string
              description: Shipping address state
              example: EE-37
            payment_description:
              type: string
              description: Payment description
              example: example.com/EE, st737137, ord41369
            amount:
              type: string
              description: Transaction amount
              example: 0.05
            start_date:
              type: string
              description: The commencement
              format: date-time
              example: '2024-10-30'
            end_date:
              type: string
              description: The expiration day of the agreement
              format: date-time
              example: '2030-10-30'
            frequency:
              type: string
              description: >-
                The frequency expressed in days that represents the interval
                between the recuring payments of instructed amount and currency
              example: Monthly
            debtor_iban:
              type: string
              description: Customer IBAN which money is taken from
              example: EE717700771001735865
            creditor_iban:
              type: string
              description: Merchant IBAN which money is sent to
              example: EE168938346545967075
            method_source:
              type: string
              description: The Open Banking method that was used to sign the agreement
              example: lhv_ob_ee
            currency:
              type: string
              description: The currency of the instructed amount
              example: EUR
      description: API_V4_Entities_AgreementStatusResponse model
    API_V4_Entities_AgreementDeleteResponse:
      type: object
      properties:
        state:
          type: string
          description: Status of the agreement
          example: cancelled
      description: API_V4_Entities_AgreementDeleteResponse model
    API_V4_Entities_RevertRefundResponse:
      required:
        - api_username
        - initial_amount
        - payment_reference
        - standing_amount
      type: object
      properties:
        api_username:
          type: string
          description: The api_username of the Merchant doing the request
          example: a04e7ce1060e7024
        payment_reference:
          type: string
          description: Payment Gateway reference for this payment
          example: 0a887489dd023f1affd5dd0735a9766415c96d9314b738da8c7117e24216d62a
        payment_state:
          type: string
          description: Current status of the payment
          example: settled
        initial_amount:
          type: number
          description: Payment initial amount
          format: float
          example: 10
        standing_amount:
          type: number
          description: Payment standing amount (after revert refunds)
          format: float
          example: 10
      description: API_V4_Entities_RevertRefundResponse model
    API_V4_Entities_InstrumentTokenResponse:
      type: object
      properties:
        api_username:
          type: string
          description: The API username of the Merchant sending the request
          example: a04e7ce1060e7024
        token:
          type: string
          description: Instrument token which is sent in the request
          example: bd7bc8e61b2g3f5831k0c2m9
        status:
          type: string
          description: The status of the instrument token
          example: ACTIVE
        card_art:
          type: string
          description: Media content of instrument token
          example: null
        last_four_digits:
          type: string
          description: Last four digits of the tokenized card's number
          example: 3438
        month:
          type: string
          description: Tokenized card's expiry month
          example: 12
        year:
          type: string
          description: Tokenized card's expiry year
          example: 2025
        holder_name:
          type: string
          description: The name of the tokenized card's owner
          example: John Doe
        debtor_iban:
          type: string
          description: Customer IBAN which money is taken from (in case of SEPA payments)
          example: EE717700771001735865
      description: API_V4_Entities_InstrumentTokenResponse model
    API_V4_Entities_SchemaTokenResponse:
      type: object
      properties:
        api_username:
          type: string
          description: The API username of the Merchant sending the request
          example: a04e7ce1060e7024
        token:
          type: string
          description: Instrument token which is sent in the request
          example: bd7bc8e61b2g3f5831k0c2m9
        status:
          type: string
          description: The status of the instrument token
          example: DEACTIVATED
        warnings:
          type: string
          description: Processing warnings
          example: Token could not be deleted
      description: API_V4_Entities_SchemaTokenResponse model
security:
  - merchantBasicAuth: []
servers:
  - url: https://igw-demo.every-pay.com/api
  - url: https://payment.ecommerce.sebgroup.com/api
paths:
  /v4/payments/oneoff:
    post:
      tags:
        - Payments
      description: >
        This endpoint can be used for the following use cases:

        - For regular One-off payments. PSU (Payment Service User) can make card
        (including Apple Pay, Google Pay), Open Banking or alternative payments
        (PayPal)

        - To save card details for MIT (Merchant Initiated Transactions) and
        card/bank details for CIT (Customer Initiated Transactions),  using
        `request_token= true` and `token_agreement=unscheduled` paramters, card
        or bank details will be saved in case of a Settled payment and consent
        given from PSU. The stored card token can be used for future MIT/CIT/CT
        payments, in case of stored bank token it can be used for future CIT
        payments

        - To save card details for recurring payments and subscriptions, using
        `request_token=true` and `token_agreement=recurring` parameters, card
        details will be saved in case of a Settled payment and consent given
        from PSU. The stored card token can be used for future MIT payments

        - To save card details without any purchase, the amount is set as 0,
        `request_token=true`  and `token_agreement` is selected as either
        `unscheduled` or `recurring`, card details will be saved in case of a
        Settled payment and consent given from PSU. Card token can be used for
        future MIT/CIT payments


        **Note**: `token_agreement` must be specified when `request_token=true`
      operationId: Initiate One-off payment
      requestBody:
        content:
          application/json:
            schema:
              required:
                - account_name
                - amount
                - api_username
                - customer_url
                - nonce
                - order_reference
                - timestamp
              properties:
                structured_reference:
                  type: string
                  description: >-
                    Different formats in different countries. Used for Open
                    banking payments only
                  example: 5705872
                payment_description:
                  type: string
                  description: >
                    When this parameter is provided, it will be used with open
                    banking payment methods instead of the standard generated
                    description value.

                    With possible truncation due to payment method configuration
                    and transliteration requirements we recommend to use 65
                    chars when sending the payment description field.


                    Allowed characters: [a-zA-Z0-9/-?:().,'+]
                  example: example.com 84005a6c
                account_name:
                  type: string
                  description: >-
                    Processing account used for the payment. Most importantly,
                    this will determine available payment methods and currency
                    of the payment
                  example: EUR3D1
                nonce:
                  type: string
                  description: Random string used for detecting duplicate requests
                  example: 165784ab51fkm
                timestamp:
                  type: string
                  description: >-
                    A timestamp of request's creation time. The request must be
                    in an allowed time-window (±5 minutes). Must use ISO 8601
                    standard format
                  format: date-time
                  example: '2023-12-05T10:27:32Z'
                amount:
                  type: number
                  description: >-
                    Transaction amount, use decimal number with 2 digit
                    precision. The currency is taken from the specified
                    processing account. Can be also set as 0 for card
                    verification (saving card for further token payments)
                  format: float
                  example: 0.05
                order_reference:
                  type: string
                  description: >
                    Merchant's order reference. Uniqueness requirements can be
                    configured in Portal. Maximum length is 255 characters for
                    card payments and 120 characters

                    for open banking payments, unless otherwise defined by
                    Acquirer bank/host.


                    Allowed characters: [a-zA-Z0-9/-?:().,'+]
                  example: 84005a6c
                request_token:
                  type: boolean
                  description: >-
                    Boolean to indicate that payment should return a token in
                    the response - for future token payment usage. Valid values:
                    `true`, `false`
                  example: true
                token_agreement:
                  type: string
                  description: >-
                    Type of the agreement. It must be sent when
                    `request_token=true`. It is a conditional parameter
                  enum:
                    - unscheduled
                    - recurring
                  example: unscheduled
                email:
                  type: string
                  description: >
                    Customer's email. This parameter is used in 3DS
                    authentication requests to enhance payment processing
                    efficiency, improve security, and comply with industry
                    standards.

                    Due to upcoming updates from Visa and Mastercard, including
                    this information will soon be mandatory for all card payment
                    requests.


                    Character limit 255
                  example: example@gmail.com
                phone_number:
                  type: object
                  description: >
                    Customer's phone number. This parameter is used in 3DS
                    authentication requests to enhance payment processing
                    efficiency, improve security, and comply with industry
                    standards.

                    Due to upcoming updates from Visa and Mastercard, including
                    this information will soon be mandatory for all card payment
                    requests.
                  properties:
                    country_code:
                      type: string
                      description: Phone number country code. 1 - 4 digits
                      example: 372
                    number:
                      type: string
                      description: Phone number. 4 - 14 digits
                      example: 7878419
                customer_ip:
                  type: string
                  description: >-
                    Customer's IP address. Used for fraud prevention. Do not set
                    this to fixed value, e.g Merchant's server, as this will
                    start generating false positives in fraud check
                  example: 53.62.137.190
                customer_url:
                  type: string
                  description: >-
                    URL where the Customer should be redirected after completing
                    the payment. `payment_reference` and `order_reference`
                    parameters are added when a customer is redirected to
                    `customer_url`. Customer URL has to be a fully qualified
                    domain name, it is not possible to use an IP address or
                    localhost
                  example: https://example.com
                locale:
                  type: string
                  description: >
                    A locale that should be used as the default for the payment
                    page. Customer's can change it via drop-down menu. Default
                    value `en`


                    Accepted values:

                    - `en` - English

                    - `cz` - Czech

                    - `da` - Danish

                    - `nl` - Dutch

                    - `et` - Estonian

                    - `fi` - Finnish

                    - `fr` - French

                    - `de` - German

                    - `hu` - Hungarian

                    - `it` - Italian

                    - `lv` - Latvian

                    - `lt` - Lithuanian

                    - `no` - Norwegian

                    - `pl` - Polish

                    - `pt` - Portuguese

                    - `ru` - Russian

                    - `sk` - Slovak

                    - `es` - Spanish

                    - `sv` - Swedish

                    - `uk` - Ukrainian


                    **Note**: User's previous preference overrides the locale
                    requested by the merchant
                  example: et
                api_username:
                  type: string
                  description: >-
                    The API username of the Merchant sending the request. Must
                    match with username in the Authorization HTTP header (16
                    characters)
                  example: a04e7ce1060e7024
                preferred_country:
                  type: string
                  description: >-
                    Default country for the payment page Open banking payment
                    method selection
                  enum:
                    - EE
                    - LV
                    - LT
                  example: EE
                billing_city:
                  type: string
                  description: Cardholder billing address city. Character limit 255
                  example: Tallinn
                billing_country:
                  type: string
                  description: 'Cardholder billing address country. Format: ISO alpha-2'
                  example: EE
                billing_line1:
                  type: string
                  description: Cardholder billing address line 1. Character limit 255
                  example: Tartu mnt 2
                billing_line2:
                  type: string
                  description: Cardholder Billing address line 2. Character limit 255
                  example: null
                billing_line3:
                  type: string
                  description: Cardholder Billing address line 3. Character limit 255
                  example: null
                billing_postcode:
                  type: string
                  description: Cardholder billing address postal code. Character limit 255
                  example: 10145
                billing_state:
                  type: string
                  description: 'Cardholder billing address state. Format: ISO 3166-2'
                  example: EE-37
                shipping_city:
                  type: string
                  description: >-
                    Cardholder shipping address city. It will be sent if
                    available. Character limit 255
                  example: Tallinn
                shipping_country:
                  type: string
                  description: >-
                    Cardholder shipping address country. It will be sent if
                    available. Format: ISO alpha-2
                  example: EE
                shipping_line1:
                  type: string
                  description: >-
                    Cardholder shipping address line 1. It will be sent if
                    available. Character limit 255
                  example: Tartu mnt 2
                shipping_line2:
                  type: string
                  description: >-
                    Cardholder shipping address line 2. It will be sent if
                    available. Character limit 255
                  example: null
                shipping_line3:
                  type: string
                  description: >-
                    Cardholder shipping address line 3. It will be sent if
                    available. Character limit 255
                  example: null
                shipping_postcode:
                  type: string
                  description: >-
                    Cardholder shipping address postal code. It will be sent if
                    available. Character limit 255
                  example: 10145
                shipping_state:
                  type: string
                  description: >-
                    Cardholder shipping address state. It will be sent if
                    available. Character limit 255
                  example: EE-37
                mobile_payment:
                  type: boolean
                  description: >-
                    Payment is initiated in mobile environment (APP). Valid
                    values: `true`, `false`
                  example: true
                token_consent_agreed:
                  type: boolean
                  description: >-
                    Boolean to indicate that merchant has token consent in Terms
                    and Conditions to avoid the save card details checkbox in
                    payment page card details form. Valid values: `true`,
                    `false`
                  example: true
                integration_details:
                  type: object
                  description: Details of integration
                  properties:
                    integration:
                      type: string
                      description: Type of integration
                      example: Custom
                    software:
                      type: string
                      description: The name of the software
                      example: eCommerce
                    version:
                      type: string
                      description: Version number of the integration software
                      example: 2.1
      responses:
        '201':
          description: Initiate One-off payment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_V4_Entities_PaymentOneoffResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_ErrorResponse_400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_ErrorResponse_401'
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://igw-demo.every-pay.com/api/v4/payments/oneoff';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Basic REPLACE_BASIC_AUTH', 'content-type': 'application/json'},
              body: '{"structured_reference":5705872,"payment_description":"example.com 84005a6c","account_name":"EUR3D1","nonce":"165784ab51fkm","timestamp":"2023-12-05T10:27:32Z","amount":0.05,"order_reference":"84005a6c","request_token":true,"token_agreement":"unscheduled","email":"example@gmail.com","phone_number":{"country_code":372,"number":7878419},"customer_ip":"53.62.137.190","customer_url":"https://example.com","locale":"et","api_username":"a04e7ce1060e7024","preferred_country":"EE","billing_city":"Tallinn","billing_country":"EE","billing_line1":"Tartu mnt 2","billing_line2":null,"billing_line3":null,"billing_postcode":10145,"billing_state":"EE-37","shipping_city":"Tallinn","shipping_country":"EE","shipping_line1":"Tartu mnt 2","shipping_line2":null,"shipping_line3":null,"shipping_postcode":10145,"shipping_state":"EE-37","mobile_payment":true,"token_consent_agreed":true,"integration_details":{"integration":"Custom","software":"eCommerce","version":2.1}}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'

            require 'openssl'


            url = URI("https://igw-demo.every-pay.com/api/v4/payments/oneoff")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["Authorization"] = 'Basic REPLACE_BASIC_AUTH'

            request["content-type"] = 'application/json'

            request.body =
            "{\"structured_reference\":5705872,\"payment_description\":\"example.com
            84005a6c\",\"account_name\":\"EUR3D1\",\"nonce\":\"165784ab51fkm\",\"timestamp\":\"2023-12-05T10:27:32Z\",\"amount\":0.05,\"order_reference\":\"84005a6c\",\"request_token\":true,\"token_agreement\":\"unscheduled\",\"email\":\"example@gmail.com\",\"phone_number\":{\"country_code\":372,\"number\":7878419},\"customer_ip\":\"53.62.137.190\",\"customer_url\":\"https://example.com\",\"locale\":\"et\",\"api_username\":\"a04e7ce1060e7024\",\"preferred_country\":\"EE\",\"billing_city\":\"Tallinn\",\"billing_country\":\"EE\",\"billing_line1\":\"Tartu
            mnt
            2\",\"billing_line2\":null,\"billing_line3\":null,\"billing_postcode\":10145,\"billing_state\":\"EE-37\",\"shipping_city\":\"Tallinn\",\"shipping_country\":\"EE\",\"shipping_line1\":\"Tartu
            mnt
            2\",\"shipping_line2\":null,\"shipping_line3\":null,\"shipping_postcode\":10145,\"shipping_state\":\"EE-37\",\"mobile_payment\":true,\"token_consent_agreed\":true,\"integration_details\":{\"integration\":\"Custom\",\"software\":\"eCommerce\",\"version\":2.1}}"


            response = http.request(request)

            puts response.read_body
        - lang: Php
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://igw-demo.every-pay.com/api/v4/payments/oneoff",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"structured_reference\":5705872,\"payment_description\":\"example.com 84005a6c\",\"account_name\":\"EUR3D1\",\"nonce\":\"165784ab51fkm\",\"timestamp\":\"2023-12-05T10:27:32Z\",\"amount\":0.05,\"order_reference\":\"84005a6c\",\"request_token\":true,\"token_agreement\":\"unscheduled\",\"email\":\"example@gmail.com\",\"phone_number\":{\"country_code\":372,\"number\":7878419},\"customer_ip\":\"53.62.137.190\",\"customer_url\":\"https://example.com\",\"locale\":\"et\",\"api_username\":\"a04e7ce1060e7024\",\"preferred_country\":\"EE\",\"billing_city\":\"Tallinn\",\"billing_country\":\"EE\",\"billing_line1\":\"Tartu mnt 2\",\"billing_line2\":null,\"billing_line3\":null,\"billing_postcode\":10145,\"billing_state\":\"EE-37\",\"shipping_city\":\"Tallinn\",\"shipping_country\":\"EE\",\"shipping_line1\":\"Tartu mnt 2\",\"shipping_line2\":null,\"shipping_line3\":null,\"shipping_postcode\":10145,\"shipping_state\":\"EE-37\",\"mobile_payment\":true,\"token_consent_agreed\":true,\"integration_details\":{\"integration\":\"Custom\",\"software\":\"eCommerce\",\"version\":2.1}}",
              CURLOPT_HTTPHEADER => [
                "Authorization: Basic REPLACE_BASIC_AUTH",
                "content-type: application/json"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://igw-demo.every-pay.com/api/v4/payments/oneoff \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --header 'content-type: application/json' \
              --data '{"structured_reference":5705872,"payment_description":"example.com 84005a6c","account_name":"EUR3D1","nonce":"165784ab51fkm","timestamp":"2023-12-05T10:27:32Z","amount":0.05,"order_reference":"84005a6c","request_token":true,"token_agreement":"unscheduled","email":"example@gmail.com","phone_number":{"country_code":372,"number":7878419},"customer_ip":"53.62.137.190","customer_url":"https://example.com","locale":"et","api_username":"a04e7ce1060e7024","preferred_country":"EE","billing_city":"Tallinn","billing_country":"EE","billing_line1":"Tartu mnt 2","billing_line2":null,"billing_line3":null,"billing_postcode":10145,"billing_state":"EE-37","shipping_city":"Tallinn","shipping_country":"EE","shipping_line1":"Tartu mnt 2","shipping_line2":null,"shipping_line3":null,"shipping_postcode":10145,"shipping_state":"EE-37","mobile_payment":true,"token_consent_agreed":true,"integration_details":{"integration":"Custom","software":"eCommerce","version":2.1}}'
  /v4/payments/cit:
    post:
      tags:
        - Payments
      description: >
        This endpoint is designated for processing CIT (Customer Initiated
        Transaction) payments, and for `token_agreement` only `unscheduled` can
        be used. TMerchants are required to employ the `/payments/charge`
        endpoint

        to finalize the transaction. It accommodates both card and Open Banking
        payments, provided the payment methods support tokenization
      operationId: Initiate CIT payment
      requestBody:
        content:
          application/json:
            schema:
              required:
                - account_name
                - amount
                - api_username
                - customer_url
                - nonce
                - order_reference
                - timestamp
                - token_agreement
              properties:
                account_name:
                  type: string
                  description: >-
                    Processing account used for the payment. This will determine
                    settings and currency of the payment
                  example: EUR3D1
                nonce:
                  type: string
                  description: Random string used for detecting duplicate requests
                  example: 165784ab51fkm
                timestamp:
                  type: string
                  description: >-
                    A timestamp of request's creation time. The request must be
                    in an allowed time-window (±5 minutes). Must use ISO 8601
                    standard format
                  format: date-time
                  example: '2023-12-05T10:27:32Z'
                order_reference:
                  type: string
                  description: >
                    Merchant's order reference. Uniqueness requirements can be
                    configured in Merchant portal. Maximum length is 255
                    characters, unless otherwise defined by Acquirer bank/host.


                    Allowed characters: [a-zA-Z0-9/-?:().,'+]
                  example: 84005a6c
                email:
                  type: string
                  description: >
                    Customer's email. This parameter is used in 3DS
                    authentication requests to enhance payment processing
                    efficiency, improve security, and comply with industry
                    standards.

                    Due to upcoming updates from Visa and Mastercard, including
                    this information will soon be mandatory for all card payment
                    requests.


                    Character limit 255
                  example: example@gmail.com
                phone_number:
                  type: object
                  description: >
                    Customer's phone number. This parameter is used in 3DS
                    authentication requests to enhance payment processing
                    efficiency, improve security, and comply with industry
                    standards.

                    Due to upcoming updates from Visa and Mastercard, including
                    this information will soon be mandatory for all card payment
                    requests.
                  properties:
                    country_code:
                      type: string
                      description: Phone number country code. 1 - 4 digits
                      example: 372
                    number:
                      type: string
                      description: Phone number. 4 - 14 digits
                      example: 7878419
                customer_ip:
                  type: string
                  description: >-
                    Customer's IP address. Used for fraud prevention. Do not set
                    this to fixed value, e.g Merchant's server, as this will
                    start generating false positives in fraud check
                  example: 53.62.137.190
                customer_url:
                  type: string
                  description: >-
                    URL where the Customer should be redirected after completing
                    the payment. `payment_reference` and `order_reference`
                    parameters are added when a customer is redirected to
                    `customer_url`. Customer URL has to be a fully qualified
                    domain name, it is not possible to use an IP address or
                    localhost
                  example: https://example.com
                locale:
                  type: string
                  description: >
                    A locale that should be used as the default for the payment
                    page. Customer's can change it via drop-down menu. Default
                    value `en`


                    Accepted values:

                    - `en` - English

                    - `cz` - Czech

                    - `da` - Danish

                    - `nl` - Dutch

                    - `et` - Estonian

                    - `fi` - Finnish

                    - `fr` - French

                    - `de` - German

                    - `hu` - Hungarian

                    - `it` - Italian

                    - `lv` - Latvian

                    - `lt` - Lithuanian

                    - `no` - Norwegian

                    - `pl` - Polish

                    - `pt` - Portuguese

                    - `ru` - Russian

                    - `sk` - Slovak

                    - `es` - Spanish

                    - `sv` - Swedish

                    - `uk` - Ukrainian


                    **Note**: User's previous preference overrides the locale
                    requested by the merchant
                  example: et
                api_username:
                  type: string
                  description: >-
                    The API username of the Merchant sending the request. Must
                    match with username in the Authorization HTTP header (16
                    characters)
                  example: a04e7ce1060e7024
                billing_city:
                  type: string
                  description: Cardholder billing address city. Character limit 255
                  example: Tallinn
                billing_country:
                  type: string
                  description: 'Cardholder billing address country. Format: ISO alpha-2'
                  example: EE
                billing_line1:
                  type: string
                  description: Cardholder billing address line 1. Character limit 255
                  example: Tartu mnt 2
                billing_line2:
                  type: string
                  description: Cardholder Billing address line 2. Character limit 255
                  example: null
                billing_line3:
                  type: string
                  description: Cardholder Billing address line 3. Character limit 255
                  example: null
                billing_postcode:
                  type: string
                  description: Cardholder billing address postal code. Character limit 255
                  example: 10145
                billing_state:
                  type: string
                  description: 'Cardholder billing address state. Format: ISO 3166-2'
                  example: EE-37
                shipping_city:
                  type: string
                  description: >-
                    Cardholder shipping address city. It will be sent if
                    available. Character limit 255
                  example: Tallinn
                shipping_country:
                  type: string
                  description: >-
                    Cardholder shipping address country. It will be sent if
                    available. Format: ISO alpha-2
                  example: EE
                shipping_line1:
                  type: string
                  description: >-
                    Cardholder shipping address line 1. It will be sent if
                    available. Character limit 255
                  example: Tartu mnt 2
                shipping_line2:
                  type: string
                  description: >-
                    Cardholder shipping address line 2. It will be sent if
                    available. Character limit 255
                  example: null
                shipping_line3:
                  type: string
                  description: >-
                    Cardholder shipping address line 3. It will be sent if
                    available. Character limit 255
                  example: null
                shipping_postcode:
                  type: string
                  description: >-
                    Cardholder shipping address postal code. It will be sent if
                    available. Character limit 255
                  example: 10145
                shipping_state:
                  type: string
                  description: >-
                    Cardholder shipping address state. It will be sent if
                    available. Character limit 255
                  example: EE-37
                token_agreement:
                  type: string
                  description: 'Type of the agreement. Valid values: "unscheduled"'
                  example: unscheduled
                amount:
                  type: number
                  description: >-
                    Transaction amount, use decimal number with 2 digit
                    precision. The currency is taken from the specified
                    processing account.
                  format: float
                  example: 0.05
                integration_details:
                  type: object
                  description: Details of integration
                  properties:
                    integration:
                      type: string
                      description: Type of integration
                      example: Custom
                    software:
                      type: string
                      description: The name of the software
                      example: eCommerce
                    version:
                      type: string
                      description: Version number of the integration software
                      example: 2.1
      responses:
        '201':
          description: Initiate CIT payment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_V4_Entities_PaymentCitResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_ErrorResponse_400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_ErrorResponse_401'
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://igw-demo.every-pay.com/api/v4/payments/cit';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Basic REPLACE_BASIC_AUTH', 'content-type': 'application/json'},
              body: '{"account_name":"EUR3D1","nonce":"165784ab51fkm","timestamp":"2023-12-05T10:27:32Z","order_reference":"84005a6c","email":"example@gmail.com","phone_number":{"country_code":372,"number":7878419},"customer_ip":"53.62.137.190","customer_url":"https://example.com","locale":"et","api_username":"a04e7ce1060e7024","billing_city":"Tallinn","billing_country":"EE","billing_line1":"Tartu mnt 2","billing_line2":null,"billing_line3":null,"billing_postcode":10145,"billing_state":"EE-37","shipping_city":"Tallinn","shipping_country":"EE","shipping_line1":"Tartu mnt 2","shipping_line2":null,"shipping_line3":null,"shipping_postcode":10145,"shipping_state":"EE-37","token_agreement":"unscheduled","amount":0.05,"integration_details":{"integration":"Custom","software":"eCommerce","version":2.1}}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'

            require 'openssl'


            url = URI("https://igw-demo.every-pay.com/api/v4/payments/cit")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["Authorization"] = 'Basic REPLACE_BASIC_AUTH'

            request["content-type"] = 'application/json'

            request.body =
            "{\"account_name\":\"EUR3D1\",\"nonce\":\"165784ab51fkm\",\"timestamp\":\"2023-12-05T10:27:32Z\",\"order_reference\":\"84005a6c\",\"email\":\"example@gmail.com\",\"phone_number\":{\"country_code\":372,\"number\":7878419},\"customer_ip\":\"53.62.137.190\",\"customer_url\":\"https://example.com\",\"locale\":\"et\",\"api_username\":\"a04e7ce1060e7024\",\"billing_city\":\"Tallinn\",\"billing_country\":\"EE\",\"billing_line1\":\"Tartu
            mnt
            2\",\"billing_line2\":null,\"billing_line3\":null,\"billing_postcode\":10145,\"billing_state\":\"EE-37\",\"shipping_city\":\"Tallinn\",\"shipping_country\":\"EE\",\"shipping_line1\":\"Tartu
            mnt
            2\",\"shipping_line2\":null,\"shipping_line3\":null,\"shipping_postcode\":10145,\"shipping_state\":\"EE-37\",\"token_agreement\":\"unscheduled\",\"amount\":0.05,\"integration_details\":{\"integration\":\"Custom\",\"software\":\"eCommerce\",\"version\":2.1}}"


            response = http.request(request)

            puts response.read_body
        - lang: Php
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://igw-demo.every-pay.com/api/v4/payments/cit",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"account_name\":\"EUR3D1\",\"nonce\":\"165784ab51fkm\",\"timestamp\":\"2023-12-05T10:27:32Z\",\"order_reference\":\"84005a6c\",\"email\":\"example@gmail.com\",\"phone_number\":{\"country_code\":372,\"number\":7878419},\"customer_ip\":\"53.62.137.190\",\"customer_url\":\"https://example.com\",\"locale\":\"et\",\"api_username\":\"a04e7ce1060e7024\",\"billing_city\":\"Tallinn\",\"billing_country\":\"EE\",\"billing_line1\":\"Tartu mnt 2\",\"billing_line2\":null,\"billing_line3\":null,\"billing_postcode\":10145,\"billing_state\":\"EE-37\",\"shipping_city\":\"Tallinn\",\"shipping_country\":\"EE\",\"shipping_line1\":\"Tartu mnt 2\",\"shipping_line2\":null,\"shipping_line3\":null,\"shipping_postcode\":10145,\"shipping_state\":\"EE-37\",\"token_agreement\":\"unscheduled\",\"amount\":0.05,\"integration_details\":{\"integration\":\"Custom\",\"software\":\"eCommerce\",\"version\":2.1}}",
              CURLOPT_HTTPHEADER => [
                "Authorization: Basic REPLACE_BASIC_AUTH",
                "content-type: application/json"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://igw-demo.every-pay.com/api/v4/payments/cit \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --header 'content-type: application/json' \
              --data '{"account_name":"EUR3D1","nonce":"165784ab51fkm","timestamp":"2023-12-05T10:27:32Z","order_reference":"84005a6c","email":"example@gmail.com","phone_number":{"country_code":372,"number":7878419},"customer_ip":"53.62.137.190","customer_url":"https://example.com","locale":"et","api_username":"a04e7ce1060e7024","billing_city":"Tallinn","billing_country":"EE","billing_line1":"Tartu mnt 2","billing_line2":null,"billing_line3":null,"billing_postcode":10145,"billing_state":"EE-37","shipping_city":"Tallinn","shipping_country":"EE","shipping_line1":"Tartu mnt 2","shipping_line2":null,"shipping_line3":null,"shipping_postcode":10145,"shipping_state":"EE-37","token_agreement":"unscheduled","amount":0.05,"integration_details":{"integration":"Custom","software":"eCommerce","version":2.1}}'
  /v4/payments/mit:
    post:
      tags:
        - Payments
      description: >-
        This endpoint facilitates MIT (Merchant Initiated Transactions)
        payments, which are token-based transactions governed by an agreement
        between the cardholder and merchant. Once established, this agreement
        enables the merchant to initiate subsequent payments from the card
        without direct involvement of the cardholder. MIT payments do not
        require cardholder authentication since they stem from a prior
        transaction where the cardholder was present. However, the initial
        transaction to establish the agreement must always adhere to 3DS (strong
        customer authentication) regulated by the Payments Service Directive 2
        (PSD2). MIT payments can occur as either `recurring` payments (with
        fixed amounts and intervals) or as `unscheduled` credential-on-file
        transactions (with fixed or variable amounts and frequencies as outlined
        in the merchant-customer agreement). To finalize the payment merchant
        needs to use `/payments/charge` endpoint. This endpoint is exclusive to
        card payments
      operationId: Initiate MIT payment
      requestBody:
        content:
          application/json:
            schema:
              required:
                - account_name
                - amount
                - api_username
                - merchant_ip
                - nonce
                - order_reference
                - timestamp
                - token_agreement
              properties:
                account_name:
                  type: string
                  description: >-
                    Processing account used for the payment. This will determine
                    settings and currency of the payment
                  example: EUR3D1
                nonce:
                  type: string
                  description: Random string used for detecting duplicate requests
                  example: 165784ab51fkm
                timestamp:
                  type: string
                  description: >-
                    A timestamp of request's creation time. The request must be
                    in an allowed time-window (±5 minutes). Must use ISO 8601
                    standard format
                  format: date-time
                  example: '2023-12-05T10:27:32Z'
                order_reference:
                  type: string
                  description: >
                    Merchant's order reference. Uniqueness requirements can be
                    configured in Merchant portal. Maximum length is 255
                    characters, unless otherwise defined by Acquirer bank/host.


                    Allowed characters: [a-zA-Z0-9/-?:().,'+]
                  example: 84005a6c
                email:
                  type: string
                  description: >-
                    Customer's email. Used for fraud prevention. Character limit
                    255
                  example: example@gmail.com
                api_username:
                  type: string
                  description: >-
                    The API username of the Merchant sending the request. Must
                    match with username in the Authorization HTTP header (16
                    characters)
                  example: a04e7ce1060e7024
                amount:
                  type: number
                  description: >-
                    Transaction amount, use decimal number with 2 digit
                    precision. The currency is taken from the specified
                    processing account.
                  format: float
                  example: 0.05
                token_agreement:
                  type: string
                  description: Type of the agreement
                  enum:
                    - recurring
                    - unscheduled
                  example: unscheduled
                merchant_ip:
                  type: string
                  description: >-
                    The IP of the Merchant server (as Customer is not involved
                    in the payment process)
                  example: 53.62.137.190
                integration_details:
                  type: object
                  description: Details of integration
                  properties:
                    integration:
                      type: string
                      description: Type of integration
                      example: Custom
                    software:
                      type: string
                      description: The name of the software
                      example: eCommerce
                    version:
                      type: string
                      description: Version number of the integration software
                      example: 2.1
        required: true
      responses:
        '201':
          description: Intiate MIT payment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_V4_Entities_PaymentMitResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_ErrorResponse_400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_ErrorResponse_401'
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://igw-demo.every-pay.com/api/v4/payments/mit';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Basic REPLACE_BASIC_AUTH', 'content-type': 'application/json'},
              body: '{"account_name":"EUR3D1","nonce":"165784ab51fkm","timestamp":"2023-12-05T10:27:32Z","order_reference":"84005a6c","email":"example@gmail.com","api_username":"a04e7ce1060e7024","amount":0.05,"token_agreement":"unscheduled","merchant_ip":"53.62.137.190","integration_details":{"integration":"Custom","software":"eCommerce","version":2.1}}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'

            require 'openssl'


            url = URI("https://igw-demo.every-pay.com/api/v4/payments/mit")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["Authorization"] = 'Basic REPLACE_BASIC_AUTH'

            request["content-type"] = 'application/json'

            request.body =
            "{\"account_name\":\"EUR3D1\",\"nonce\":\"165784ab51fkm\",\"timestamp\":\"2023-12-05T10:27:32Z\",\"order_reference\":\"84005a6c\",\"email\":\"example@gmail.com\",\"api_username\":\"a04e7ce1060e7024\",\"amount\":0.05,\"token_agreement\":\"unscheduled\",\"merchant_ip\":\"53.62.137.190\",\"integration_details\":{\"integration\":\"Custom\",\"software\":\"eCommerce\",\"version\":2.1}}"


            response = http.request(request)

            puts response.read_body
        - lang: Php
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://igw-demo.every-pay.com/api/v4/payments/mit",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"account_name\":\"EUR3D1\",\"nonce\":\"165784ab51fkm\",\"timestamp\":\"2023-12-05T10:27:32Z\",\"order_reference\":\"84005a6c\",\"email\":\"example@gmail.com\",\"api_username\":\"a04e7ce1060e7024\",\"amount\":0.05,\"token_agreement\":\"unscheduled\",\"merchant_ip\":\"53.62.137.190\",\"integration_details\":{\"integration\":\"Custom\",\"software\":\"eCommerce\",\"version\":2.1}}",
              CURLOPT_HTTPHEADER => [
                "Authorization: Basic REPLACE_BASIC_AUTH",
                "content-type: application/json"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://igw-demo.every-pay.com/api/v4/payments/mit \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --header 'content-type: application/json' \
              --data '{"account_name":"EUR3D1","nonce":"165784ab51fkm","timestamp":"2023-12-05T10:27:32Z","order_reference":"84005a6c","email":"example@gmail.com","api_username":"a04e7ce1060e7024","amount":0.05,"token_agreement":"unscheduled","merchant_ip":"53.62.137.190","integration_details":{"integration":"Custom","software":"eCommerce","version":2.1}}'
  /v4/payments/charge:
    post:
      tags:
        - Payments
      description: >
        This endpoint is utilized to finalize payments for one-off, CIT
        (Customer Initiated Transaction), MIT (Merchant Initiated Transaction),
        or CT (Credit Transaction). Additionally, the `/payments/charge`

        endpoint allows for token sharing between merchants. This endpoint is
        applicable to both card and Open Banking payments depending on the
        initial request


        **Note**: For one-off payments, only PCI DSS Compliant merchants can
        utilize the `/payments/charge` endpoint to collect card details
      operationId: Complete payment
      requestBody:
        content:
          application/json:
            schema:
              required:
                - api_username
                - nonce
                - payment_reference
                - timestamp
                - token_details
              properties:
                api_username:
                  type: string
                  description: >-
                    The API username of the Merchant sending the request. Must
                    match with username in the Authorization HTTP header (16
                    characters)
                  example: a04e7ce1060e7024
                timestamp:
                  type: string
                  description: >-
                    A timestamp of request's creation time. The request must be
                    in an allowed time-window (±5 minutes). Must use ISO 8601
                    standard format
                  format: date-time
                  example: '2023-12-05T10:27:32Z'
                nonce:
                  type: string
                  description: Random string used for detecting duplicate requests
                  example: 165784ab51fkm
                payment_reference:
                  type: string
                  description: Unique reference ID of the payment
                  example: >-
                    0a887489dd023f1affd5dd0735a9766415c96d9314b738da8c7117e24216d62a
                token_consented:
                  type: boolean
                  description: >-
                    It shows if the user consents to save the card details.
                    Boolean: `true`, `false`
                  example: true
                trace_id:
                  type: string
                  description: >-
                    Unique identifier used to track related transactions,
                    specifically referring to the initial approved tokenization
                    transaction. The parameter can be provided only by PCI DSS
                    compliant merchants when using cc_details
                  example: MCC000KJS0932
                cc_details:
                  type: object
                  description: >-
                    Card details. It is mandatory to send for one-off payments,
                    that is available for PCI DSS Compliant merchants
                  properties:
                    cc_number:
                      type: string
                      description: Card number, numeric string (16 digits)
                      example: 5168830759303438
                    month:
                      type: string
                      description: Card expiration month, numeric string (values 1 - 12)
                      example: 12
                    year:
                      type: string
                      description: Card expiration year, numeric string (values 20 - 40)
                      example: 2025
                    holder_name:
                      type: string
                      description: Name on card, only letters
                      example: John Doe
                    cvc:
                      type: string
                      description: CVC number, numeric string (3 or 4 digits)
                      example: 418
                token_details:
                  type: object
                  description: >-
                    It is mandatory to send `token_details.token` for CIT/MIT
                    payments. Optional fields are needed when a token is shared
                    between merchants
                  properties:
                    token:
                      type: string
                      description: Token of the saved (tokenized) card
                      example: bd7bc8e61b2g3f5831k0c2m9
                    token_owner:
                      type: string
                      description: The API username of token owner
                      example: a04e7ce1060e7024
                    token_timestamp:
                      type: string
                      description: >-
                        HMAC that proves to the gateway that token owner does
                        allow the sharing
                      example: >-
                        95d1897b3c45f607fhau38bd8c3245d6v548325v41304132ec7bfa8d70h85f18
        required: true
      responses:
        '201':
          description: Complete the payment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_V4_Entities_PaymentChargeResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_ErrorResponse_400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_ErrorResponse_401'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_ErrorResponse'
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://igw-demo.every-pay.com/api/v4/payments/charge';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Basic REPLACE_BASIC_AUTH', 'content-type': 'application/json'},
              body: '{"api_username":"a04e7ce1060e7024","timestamp":"2023-12-05T10:27:32Z","nonce":"165784ab51fkm","payment_reference":"0a887489dd023f1affd5dd0735a9766415c96d9314b738da8c7117e24216d62a","token_consented":true,"trace_id":"MCC000KJS0932","cc_details":{"cc_number":5168830759303438,"month":12,"year":2025,"holder_name":"John Doe","cvc":418},"token_details":{"token":"bd7bc8e61b2g3f5831k0c2m9","token_owner":"a04e7ce1060e7024","token_timestamp":"95d1897b3c45f607fhau38bd8c3245d6v548325v41304132ec7bfa8d70h85f18"}}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'

            require 'openssl'


            url = URI("https://igw-demo.every-pay.com/api/v4/payments/charge")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["Authorization"] = 'Basic REPLACE_BASIC_AUTH'

            request["content-type"] = 'application/json'

            request.body =
            "{\"api_username\":\"a04e7ce1060e7024\",\"timestamp\":\"2023-12-05T10:27:32Z\",\"nonce\":\"165784ab51fkm\",\"payment_reference\":\"0a887489dd023f1affd5dd0735a9766415c96d9314b738da8c7117e24216d62a\",\"token_consented\":true,\"trace_id\":\"MCC000KJS0932\",\"cc_details\":{\"cc_number\":5168830759303438,\"month\":12,\"year\":2025,\"holder_name\":\"John
            Doe\",\"cvc\":418},\"token_details\":{\"token\":\"bd7bc8e61b2g3f5831k0c2m9\",\"token_owner\":\"a04e7ce1060e7024\",\"token_timestamp\":\"95d1897b3c45f607fhau38bd8c3245d6v548325v41304132ec7bfa8d70h85f18\"}}"


            response = http.request(request)

            puts response.read_body
        - lang: Php
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://igw-demo.every-pay.com/api/v4/payments/charge",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"api_username\":\"a04e7ce1060e7024\",\"timestamp\":\"2023-12-05T10:27:32Z\",\"nonce\":\"165784ab51fkm\",\"payment_reference\":\"0a887489dd023f1affd5dd0735a9766415c96d9314b738da8c7117e24216d62a\",\"token_consented\":true,\"trace_id\":\"MCC000KJS0932\",\"cc_details\":{\"cc_number\":5168830759303438,\"month\":12,\"year\":2025,\"holder_name\":\"John Doe\",\"cvc\":418},\"token_details\":{\"token\":\"bd7bc8e61b2g3f5831k0c2m9\",\"token_owner\":\"a04e7ce1060e7024\",\"token_timestamp\":\"95d1897b3c45f607fhau38bd8c3245d6v548325v41304132ec7bfa8d70h85f18\"}}",
              CURLOPT_HTTPHEADER => [
                "Authorization: Basic REPLACE_BASIC_AUTH",
                "content-type: application/json"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://igw-demo.every-pay.com/api/v4/payments/charge \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --header 'content-type: application/json' \
              --data '{"api_username":"a04e7ce1060e7024","timestamp":"2023-12-05T10:27:32Z","nonce":"165784ab51fkm","payment_reference":"0a887489dd023f1affd5dd0735a9766415c96d9314b738da8c7117e24216d62a","token_consented":true,"trace_id":"MCC000KJS0932","cc_details":{"cc_number":5168830759303438,"month":12,"year":2025,"holder_name":"John Doe","cvc":418},"token_details":{"token":"bd7bc8e61b2g3f5831k0c2m9","token_owner":"a04e7ce1060e7024","token_timestamp":"95d1897b3c45f607fhau38bd8c3245d6v548325v41304132ec7bfa8d70h85f18"}}'
  /v4/payments/{payment_reference}:
    get:
      tags:
        - Payments
      description: >
        This endpoint retrieves the current state of the payment. It should be
        checked whenever a Callback is received to obtain the latest

        information about the payment and update the customer accordingly
      operationId: Get payment status
      parameters:
        - name: api_username
          in: query
          description: >-
            The API username of the Merchant sending the request. Must match
            with username in the Authorization HTTP header (16 characters)
          required: true
          schema:
            type: string
        - name: payment_reference
          in: path
          description: Reference ID of the payment
          required: true
          schema:
            type: string
        - name: detailed
          in: query
          description: >-
            Boolean to indicate that payment result should return fraud check
            details. Valid values: `true`, `false`
          schema:
            type: boolean
      responses:
        '200':
          description: Get payment state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_V4_Entities_PaymentStatusResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_ErrorResponse'
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://igw-demo.every-pay.com/api/v4/payments/%7Bpayment_reference%7D?api_username=SOME_STRING_VALUE&detailed=SOME_BOOLEAN_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Basic
            REPLACE_BASIC_AUTH'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'

            require 'openssl'


            url =
            URI("https://igw-demo.every-pay.com/api/v4/payments/%7Bpayment_reference%7D?api_username=SOME_STRING_VALUE&detailed=SOME_BOOLEAN_VALUE")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["Authorization"] = 'Basic REPLACE_BASIC_AUTH'


            response = http.request(request)

            puts response.read_body
        - lang: Php
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://igw-demo.every-pay.com/api/v4/payments/%7Bpayment_reference%7D?api_username=SOME_STRING_VALUE&detailed=SOME_BOOLEAN_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => [
                "Authorization: Basic REPLACE_BASIC_AUTH"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://igw-demo.every-pay.com/api/v4/payments/%7Bpayment_reference%7D?api_username=SOME_STRING_VALUE&detailed=SOME_BOOLEAN_VALUE' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /v4/payments/refund:
    post:
      tags:
        - Payments
      description: >
        You can refund both card and Open Banking payments, either in full or
        partially:

        - Refunding a settled card payment will return the funds to the
        customer's bank

        - Open Banking's general flow only supports marking the payment status
        as refunded, no actual transactions are processed

        - If you are an LHV customer, initiating an Open Banking refund request
        will also execute the refund transaction
      operationId: Refund payment
      requestBody:
        content:
          application/json:
            schema:
              required:
                - amount
                - api_username
                - nonce
                - payment_reference
                - timestamp
              properties:
                api_username:
                  type: string
                  description: >-
                    The API username of the Merchant sending the request. Must
                    match with username in the Authorization HTTP header (16
                    characters)
                  example: a04e7ce1060e7024
                amount:
                  type: number
                  description: >-
                    Amount to be refunded, use decimal number with 2 digit
                    precision
                  format: float
                  example: 0.05
                timestamp:
                  type: string
                  description: >-
                    A timestamp of request's creation time. The request must be
                    in an allowed time-window (±5 minutes). Must use ISO 8601
                    standard format
                  format: date-time
                  example: '2023-12-05T10:27:32Z'
                payment_reference:
                  type: string
                  description: Unique reference ID of the payment
                  example: >-
                    0a887489dd023f1affd5dd0735a9766415c96d9314b738da8c7117e24216d62a
                nonce:
                  type: string
                  description: Random string used for detecting duplicate requests
                  example: 165784ab51fkm
        required: true
      responses:
        '201':
          description: Refund a payment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_V4_Entities_PaymentRefundResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_ErrorResponse_400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_ErrorResponse_401'
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://igw-demo.every-pay.com/api/v4/payments/refund';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Basic REPLACE_BASIC_AUTH', 'content-type': 'application/json'},
              body: '{"api_username":"a04e7ce1060e7024","amount":0.05,"timestamp":"2023-12-05T10:27:32Z","payment_reference":"0a887489dd023f1affd5dd0735a9766415c96d9314b738da8c7117e24216d62a","nonce":"165784ab51fkm"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'

            require 'openssl'


            url = URI("https://igw-demo.every-pay.com/api/v4/payments/refund")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["Authorization"] = 'Basic REPLACE_BASIC_AUTH'

            request["content-type"] = 'application/json'

            request.body =
            "{\"api_username\":\"a04e7ce1060e7024\",\"amount\":0.05,\"timestamp\":\"2023-12-05T10:27:32Z\",\"payment_reference\":\"0a887489dd023f1affd5dd0735a9766415c96d9314b738da8c7117e24216d62a\",\"nonce\":\"165784ab51fkm\"}"


            response = http.request(request)

            puts response.read_body
        - lang: Php
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://igw-demo.every-pay.com/api/v4/payments/refund",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"api_username\":\"a04e7ce1060e7024\",\"amount\":0.05,\"timestamp\":\"2023-12-05T10:27:32Z\",\"payment_reference\":\"0a887489dd023f1affd5dd0735a9766415c96d9314b738da8c7117e24216d62a\",\"nonce\":\"165784ab51fkm\"}",
              CURLOPT_HTTPHEADER => [
                "Authorization: Basic REPLACE_BASIC_AUTH",
                "content-type: application/json"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://igw-demo.every-pay.com/api/v4/payments/refund \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --header 'content-type: application/json' \
              --data '{"api_username":"a04e7ce1060e7024","amount":0.05,"timestamp":"2023-12-05T10:27:32Z","payment_reference":"0a887489dd023f1affd5dd0735a9766415c96d9314b738da8c7117e24216d62a","nonce":"165784ab51fkm"}'
  /v4/payments/capture:
    post:
      tags:
        - Payments
      description: >-
        Capturing an authorized payment finalizes the transaction. This feature
        is exclusively used for card payments
      operationId: Capture payment
      requestBody:
        content:
          application/json:
            schema:
              required:
                - amount
                - api_username
                - nonce
                - payment_reference
                - timestamp
              properties:
                api_username:
                  type: string
                  description: >-
                    The API username of the Merchant sending the request. Must
                    match with username in the Authorization HTTP header (16
                    characters)
                  example: a04e7ce1060e7024
                amount:
                  type: number
                  description: >-
                    Amount to be captured, use decimal number with 2 digit
                    precision
                  format: float
                  example: 0.05
                timestamp:
                  type: string
                  description: >-
                    A timestamp of request's creation time. The request must be
                    in an allowed time-window (±5 minutes). Must use ISO 8601
                    standard format
                  format: date-time
                  example: '2023-12-05T10:27:32Z'
                payment_reference:
                  type: string
                  description: Unique reference ID of the payment
                  example: >-
                    0a887489dd023f1affd5dd0735a9766415c96d9314b738da8c7117e24216d62a
                nonce:
                  type: string
                  description: Random string used for detecting duplicate requests
                  example: 165784ab51fkm
        required: true
      responses:
        '201':
          description: Capture a payment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_V4_Entities_PaymentCaptureResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_ErrorResponse_400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_ErrorResponse_401'
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://igw-demo.every-pay.com/api/v4/payments/capture';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Basic REPLACE_BASIC_AUTH', 'content-type': 'application/json'},
              body: '{"api_username":"a04e7ce1060e7024","amount":0.05,"timestamp":"2023-12-05T10:27:32Z","payment_reference":"0a887489dd023f1affd5dd0735a9766415c96d9314b738da8c7117e24216d62a","nonce":"165784ab51fkm"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'

            require 'openssl'


            url = URI("https://igw-demo.every-pay.com/api/v4/payments/capture")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["Authorization"] = 'Basic REPLACE_BASIC_AUTH'

            request["content-type"] = 'application/json'

            request.body =
            "{\"api_username\":\"a04e7ce1060e7024\",\"amount\":0.05,\"timestamp\":\"2023-12-05T10:27:32Z\",\"payment_reference\":\"0a887489dd023f1affd5dd0735a9766415c96d9314b738da8c7117e24216d62a\",\"nonce\":\"165784ab51fkm\"}"


            response = http.request(request)

            puts response.read_body
        - lang: Php
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://igw-demo.every-pay.com/api/v4/payments/capture",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"api_username\":\"a04e7ce1060e7024\",\"amount\":0.05,\"timestamp\":\"2023-12-05T10:27:32Z\",\"payment_reference\":\"0a887489dd023f1affd5dd0735a9766415c96d9314b738da8c7117e24216d62a\",\"nonce\":\"165784ab51fkm\"}",
              CURLOPT_HTTPHEADER => [
                "Authorization: Basic REPLACE_BASIC_AUTH",
                "content-type: application/json"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://igw-demo.every-pay.com/api/v4/payments/capture \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --header 'content-type: application/json' \
              --data '{"api_username":"a04e7ce1060e7024","amount":0.05,"timestamp":"2023-12-05T10:27:32Z","payment_reference":"0a887489dd023f1affd5dd0735a9766415c96d9314b738da8c7117e24216d62a","nonce":"165784ab51fkm"}'
  /v4/payments/void:
    post:
      tags:
        - Payments
      description: >-
        A Void transaction reverses an authorized payment that has not yet been
        captured. This feature is exclusively used for card transactions
      operationId: Void payment
      requestBody:
        content:
          application/json:
            schema:
              required:
                - api_username
                - nonce
                - payment_reference
                - timestamp
              properties:
                api_username:
                  type: string
                  description: >-
                    The API username of the Merchant sending the request. Must
                    match with username in the Authorization HTTP header (16
                    characters)
                  example: a04e7ce1060e7024
                timestamp:
                  type: string
                  description: >-
                    A timestamp of request's creation time. The request must be
                    in an allowed time-window (±5 minutes). Must use ISO 8601
                    standard format
                  format: date-time
                  example: '2023-12-05T10:27:32Z'
                payment_reference:
                  type: string
                  description: Unique reference ID of the payment
                  example: >-
                    0a887489dd023f1affd5dd0735a9766415c96d9314b738da8c7117e24216d62a
                nonce:
                  type: string
                  description: Random string used for detecting duplicate requests
                  example: 165784ab51fkm
                reason:
                  type: string
                  description: Reason to void the payment
                  example: Fraud
        required: true
      responses:
        '201':
          description: Void a payment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_V4_Entities_PaymentVoidResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_ErrorResponse_400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_ErrorResponse_401'
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://igw-demo.every-pay.com/api/v4/payments/void';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Basic REPLACE_BASIC_AUTH', 'content-type': 'application/json'},
              body: '{"api_username":"a04e7ce1060e7024","timestamp":"2023-12-05T10:27:32Z","payment_reference":"0a887489dd023f1affd5dd0735a9766415c96d9314b738da8c7117e24216d62a","nonce":"165784ab51fkm","reason":"Fraud"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'

            require 'openssl'


            url = URI("https://igw-demo.every-pay.com/api/v4/payments/void")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["Authorization"] = 'Basic REPLACE_BASIC_AUTH'

            request["content-type"] = 'application/json'

            request.body =
            "{\"api_username\":\"a04e7ce1060e7024\",\"timestamp\":\"2023-12-05T10:27:32Z\",\"payment_reference\":\"0a887489dd023f1affd5dd0735a9766415c96d9314b738da8c7117e24216d62a\",\"nonce\":\"165784ab51fkm\",\"reason\":\"Fraud\"}"


            response = http.request(request)

            puts response.read_body
        - lang: Php
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://igw-demo.every-pay.com/api/v4/payments/void",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"api_username\":\"a04e7ce1060e7024\",\"timestamp\":\"2023-12-05T10:27:32Z\",\"payment_reference\":\"0a887489dd023f1affd5dd0735a9766415c96d9314b738da8c7117e24216d62a\",\"nonce\":\"165784ab51fkm\",\"reason\":\"Fraud\"}",
              CURLOPT_HTTPHEADER => [
                "Authorization: Basic REPLACE_BASIC_AUTH",
                "content-type: application/json"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://igw-demo.every-pay.com/api/v4/payments/void \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --header 'content-type: application/json' \
              --data '{"api_username":"a04e7ce1060e7024","timestamp":"2023-12-05T10:27:32Z","payment_reference":"0a887489dd023f1affd5dd0735a9766415c96d9314b738da8c7117e24216d62a","nonce":"165784ab51fkm","reason":"Fraud"}'
  /v4/payments/credit:
    post:
      tags:
        - Payments
      description: >
        A Credit Transaction is a payment type enabling direct fund transfer
        from the merchant to the cardholder, provided the bank supports this
        solution.

        The merchant initiates the payment (/payments/credit) and utilizes
        /payments/charge to finalize the transaction using previously stored
        card credentials.

        No PSU involvement is required, and 3DS is unavailable for this payment
        type. This endpoint is exclusive to card payments


        **Note**: Once completed, this payment cannot be voided, refunded, or
        captured
      operationId: Initiate Credit payment
      requestBody:
        content:
          application/json:
            schema:
              required:
                - account_name
                - amount
                - api_username
                - customer_url
                - nonce
                - order_reference
                - timestamp
              properties:
                account_name:
                  type: string
                  description: >-
                    Processing account used for the payment. Most importantly,
                    this will determine available payment methods and currency
                    of the payment
                  example: EUR3D1
                nonce:
                  type: string
                  description: Random string used for detecting duplicate requests
                  example: 165784ab51fkm
                timestamp:
                  type: string
                  description: >-
                    A timestamp of request's creation time. The request must be
                    in an allowed time-window (±5 minutes). Must use ISO 8601
                    standard format
                  format: date-time
                  example: '2023-12-05T10:27:32Z'
                amount:
                  type: number
                  description: >-
                    Transaction amount, use decimal number with 2 digit
                    precision. The currency is taken from the specified
                    processing account.
                  format: float
                  example: 0.05
                order_reference:
                  type: string
                  description: >
                    Merchant's order reference. Uniqueness requirements can be
                    configured in Portal. Maximum length is 255 characters for
                    card payments and 120 characters

                    for open banking payments, unless otherwise defined by
                    Acquirer bank/host.


                    Allowed characters: [a-zA-Z0-9/-?:().,'+]
                  example: 84005a6c
                email:
                  type: string
                  description: >-
                    Customer's email. Used for fraud prevention. Character limit
                    255
                  example: example@gmail.com
                customer_url:
                  type: string
                  description: >-
                    URL where the Customer should be redirected after completing
                    the payment. `payment_reference` and `order_reference`
                    parameters are added when a customer is redirected to
                    `customer_url`. Customer URL has to be a fully qualified
                    domain name, it is not possible to use an IP address or
                    localhost
                  example: https://example.com
                api_username:
                  type: string
                  description: >-
                    The API username of the Merchant sending the request. Must
                    match with username in the Authorization HTTP header (16
                    characters)
                  example: a04e7ce1060e7024
                billing_city:
                  type: string
                  description: Cardholder billing address city. Character limit 255
                  example: Tallinn
                billing_country:
                  type: string
                  description: 'Cardholder billing address country. Format: ISO alpha-2'
                  example: EE
                billing_line1:
                  type: string
                  description: Cardholder billing address line 1. Character limit 255
                  example: Tartu mnt 2
                billing_line2:
                  type: string
                  description: Cardholder Billing address line 2. Character limit 255
                  example: null
                billing_line3:
                  type: string
                  description: Cardholder Billing address line 3. Character limit 255
                  example: null
                billing_postcode:
                  type: string
                  description: Cardholder billing address postal code. Character limit 255
                  example: 10145
                billing_state:
                  type: string
                  description: 'Cardholder billing address state. Format: ISO 3166-2'
                  example: EE-37
        required: true
      responses:
        '201':
          description: Initiate Credit payment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_V4_Entities_PaymentStatusResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_ErrorResponse_400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_ErrorResponse_401'
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://igw-demo.every-pay.com/api/v4/payments/credit';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Basic REPLACE_BASIC_AUTH', 'content-type': 'application/json'},
              body: '{"account_name":"EUR3D1","nonce":"165784ab51fkm","timestamp":"2023-12-05T10:27:32Z","amount":0.05,"order_reference":"84005a6c","email":"example@gmail.com","customer_url":"https://example.com","api_username":"a04e7ce1060e7024","billing_city":"Tallinn","billing_country":"EE","billing_line1":"Tartu mnt 2","billing_line2":null,"billing_line3":null,"billing_postcode":10145,"billing_state":"EE-37"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'

            require 'openssl'


            url = URI("https://igw-demo.every-pay.com/api/v4/payments/credit")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["Authorization"] = 'Basic REPLACE_BASIC_AUTH'

            request["content-type"] = 'application/json'

            request.body =
            "{\"account_name\":\"EUR3D1\",\"nonce\":\"165784ab51fkm\",\"timestamp\":\"2023-12-05T10:27:32Z\",\"amount\":0.05,\"order_reference\":\"84005a6c\",\"email\":\"example@gmail.com\",\"customer_url\":\"https://example.com\",\"api_username\":\"a04e7ce1060e7024\",\"billing_city\":\"Tallinn\",\"billing_country\":\"EE\",\"billing_line1\":\"Tartu
            mnt
            2\",\"billing_line2\":null,\"billing_line3\":null,\"billing_postcode\":10145,\"billing_state\":\"EE-37\"}"


            response = http.request(request)

            puts response.read_body
        - lang: Php
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://igw-demo.every-pay.com/api/v4/payments/credit",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"account_name\":\"EUR3D1\",\"nonce\":\"165784ab51fkm\",\"timestamp\":\"2023-12-05T10:27:32Z\",\"amount\":0.05,\"order_reference\":\"84005a6c\",\"email\":\"example@gmail.com\",\"customer_url\":\"https://example.com\",\"api_username\":\"a04e7ce1060e7024\",\"billing_city\":\"Tallinn\",\"billing_country\":\"EE\",\"billing_line1\":\"Tartu mnt 2\",\"billing_line2\":null,\"billing_line3\":null,\"billing_postcode\":10145,\"billing_state\":\"EE-37\"}",
              CURLOPT_HTTPHEADER => [
                "Authorization: Basic REPLACE_BASIC_AUTH",
                "content-type: application/json"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://igw-demo.every-pay.com/api/v4/payments/credit \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --header 'content-type: application/json' \
              --data '{"account_name":"EUR3D1","nonce":"165784ab51fkm","timestamp":"2023-12-05T10:27:32Z","amount":0.05,"order_reference":"84005a6c","email":"example@gmail.com","customer_url":"https://example.com","api_username":"a04e7ce1060e7024","billing_city":"Tallinn","billing_country":"EE","billing_line1":"Tartu mnt 2","billing_line2":null,"billing_line3":null,"billing_postcode":10145,"billing_state":"EE-37"}'
  /v4/shops:
    get:
      tags:
        - Shops
      description: Retrieve a list of shops with their primary configuration parameters
      operationId: Get shops list
      parameters:
        - name: api_username
          in: query
          description: >-
            The api_username of the Merchant sending the request. Must match
            with username in the Authorization HTTP header (16 characters)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Get list of shops
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_V4_Entities_ShopResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_ErrorResponse_400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_ErrorResponse_401'
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://igw-demo.every-pay.com/api/v4/shops?api_username=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Basic
            REPLACE_BASIC_AUTH'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'

            require 'openssl'


            url =
            URI("https://igw-demo.every-pay.com/api/v4/shops?api_username=SOME_STRING_VALUE")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["Authorization"] = 'Basic REPLACE_BASIC_AUTH'


            response = http.request(request)

            puts response.read_body
        - lang: Php
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://igw-demo.every-pay.com/api/v4/shops?api_username=SOME_STRING_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => [
                "Authorization: Basic REPLACE_BASIC_AUTH"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://igw-demo.every-pay.com/api/v4/shops?api_username=SOME_STRING_VALUE' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /v4/shops/{id}:
    get:
      tags:
        - Shops
      description: >-
        Retrieve information about a specific shop, including its configured
        processing accounts
      operationId: Get shop details
      parameters:
        - name: api_username
          in: query
          description: >-
            The api_username of the Merchant sending the request. Must match
            with username in the Authorization HTTP header (16 characters)
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Unique ID for the shop
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Get shop info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_V4_Entities_ShopInfoResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_ErrorResponse_400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_ErrorResponse_401'
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://igw-demo.every-pay.com/api/v4/shops/%7Bid%7D?api_username=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Basic
            REPLACE_BASIC_AUTH'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'

            require 'openssl'


            url =
            URI("https://igw-demo.every-pay.com/api/v4/shops/%7Bid%7D?api_username=SOME_STRING_VALUE")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["Authorization"] = 'Basic REPLACE_BASIC_AUTH'


            response = http.request(request)

            puts response.read_body
        - lang: Php
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://igw-demo.every-pay.com/api/v4/shops/%7Bid%7D?api_username=SOME_STRING_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => [
                "Authorization: Basic REPLACE_BASIC_AUTH"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://igw-demo.every-pay.com/api/v4/shops/%7Bid%7D?api_username=SOME_STRING_VALUE' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /v4/processing_accounts:
    get:
      tags:
        - Processing Accounts
      description: >-
        Retrieve a detailed list of available processing accounts and payment
        methods
      operationId: Get account list
      parameters:
        - name: api_username
          in: query
          description: >-
            The api_username of the Merchant sending the request. Must match
            with username in the Authorization HTTP header (16 characters)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Get list of processing accounts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_V4_Entities_ProcessingAccountResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_ErrorResponse_400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_ErrorResponse_401'
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://igw-demo.every-pay.com/api/v4/processing_accounts?api_username=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Basic
            REPLACE_BASIC_AUTH'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'

            require 'openssl'


            url =
            URI("https://igw-demo.every-pay.com/api/v4/processing_accounts?api_username=SOME_STRING_VALUE")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["Authorization"] = 'Basic REPLACE_BASIC_AUTH'


            response = http.request(request)

            puts response.read_body
        - lang: Php
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://igw-demo.every-pay.com/api/v4/processing_accounts?api_username=SOME_STRING_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => [
                "Authorization: Basic REPLACE_BASIC_AUTH"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://igw-demo.every-pay.com/api/v4/processing_accounts?api_username=SOME_STRING_VALUE' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /v4/processing_accounts/{account_name}:
    get:
      tags:
        - Processing Accounts
      description: >-
        Retrieve details of a specific processing account, including available
        payment methods.
      operationId: Get account details
      parameters:
        - name: api_username
          in: query
          description: >-
            The API username of the Merchant sending the request. Must match
            with username in the Authorization HTTP header (16 characters)
          required: true
          schema:
            type: string
        - name: account_name
          in: path
          description: Processing account ID
          required: true
          schema:
            type: string
        - name: amount
          in: query
          description: >-
            By sending `amount` parameter, payment methods will be returned
            according to the limits configured in the Merchant portal
          required: false
          schema:
            type: number
            format: float
      responses:
        '200':
          description: Get details of processing account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_V4_Entities_ProcessingAccountResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_ErrorResponse_400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_ErrorResponse_401'
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://igw-demo.every-pay.com/api/v4/processing_accounts/%7Baccount_name%7D?api_username=SOME_STRING_VALUE&amount=SOME_NUMBER_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Basic
            REPLACE_BASIC_AUTH'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'

            require 'openssl'


            url =
            URI("https://igw-demo.every-pay.com/api/v4/processing_accounts/%7Baccount_name%7D?api_username=SOME_STRING_VALUE&amount=SOME_NUMBER_VALUE")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["Authorization"] = 'Basic REPLACE_BASIC_AUTH'


            response = http.request(request)

            puts response.read_body
        - lang: Php
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://igw-demo.every-pay.com/api/v4/processing_accounts/%7Baccount_name%7D?api_username=SOME_STRING_VALUE&amount=SOME_NUMBER_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => [
                "Authorization: Basic REPLACE_BASIC_AUTH"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://igw-demo.every-pay.com/api/v4/processing_accounts/%7Baccount_name%7D?api_username=SOME_STRING_VALUE&amount=SOME_NUMBER_VALUE' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /v4/mobile_payments/card_details:
    post:
      security:
        - merchantMobileTokenAuth: []
      tags:
        - Mobile Payments
      description: >
        This feature is exclusively available for use in a mobile environment
        for setting card details


        **Note**: Merchants should validate card details information before
        transmitting it to the gateway
      operationId: Send card details
      requestBody:
        content:
          application/json:
            schema:
              required:
                - api_username
                - timestamp
                - token_consented
                - mobile_access_token
                - cc_details
              properties:
                api_username:
                  type: string
                  description: >-
                    The API username of the Merchant sending the request. Must
                    match with username in the Authorization HTTP header (16
                    characters)
                  example: a04e7ce1060e7024
                token_consented:
                  type: boolean
                  description: >-
                    Boolean if the user consents to save the card details. Valid
                    values: `true`, `false`
                  example: true
                timestamp:
                  type: string
                  description: >-
                    A timestamp of request's creation time. The request must be
                    in an allowed time-window (±5 minutes). Must use ISO 8601
                    standard format
                  format: date-time
                  example: '2023-12-05T10:27:32Z'
                cc_details:
                  type: object
                  description: >-
                    Card details. It is mandatory to send for one-off payments,
                    that is available for PCI DSS Compliant merchants
                  properties:
                    cc_number:
                      type: string
                      description: Card number, numeric string (16 digits)
                      example: 5168830759303438
                    month:
                      type: string
                      description: Card expiration month, numeric string (values 1 - 12)
                      example: 12
                    year:
                      type: string
                      description: Card expiration year, numeric string (values 20 - 40)
                      example: 2025
                    holder_name:
                      type: string
                      description: Name on card, only letters
                      example: John Doe
                    cvc:
                      type: string
                      description: CVC number, numeric string (3 or 4 digits)
                      example: 418
        required: true
      responses:
        '201':
          description: Send card details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_V4_Entities_CardDetailsResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_ErrorResponse'
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://igw-demo.every-pay.com/api/v4/mobile_payments/card_details';


            let options = {
              method: 'POST',
              headers: {
                Authorization: 'Bearer REPLACE_BEARER_TOKEN',
                'content-type': 'application/json'
              },
              body: '{"api_username":"a04e7ce1060e7024","token_consented":true,"timestamp":"2023-12-05T10:27:32Z","cc_details":{"cc_number":5168830759303438,"month":12,"year":2025,"holder_name":"John Doe","cvc":418}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'

            require 'openssl'


            url =
            URI("https://igw-demo.every-pay.com/api/v4/mobile_payments/card_details")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

            request["content-type"] = 'application/json'

            request.body =
            "{\"api_username\":\"a04e7ce1060e7024\",\"token_consented\":true,\"timestamp\":\"2023-12-05T10:27:32Z\",\"cc_details\":{\"cc_number\":5168830759303438,\"month\":12,\"year\":2025,\"holder_name\":\"John
            Doe\",\"cvc\":418}}"


            response = http.request(request)

            puts response.read_body
        - lang: Php
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://igw-demo.every-pay.com/api/v4/mobile_payments/card_details",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"api_username\":\"a04e7ce1060e7024\",\"token_consented\":true,\"timestamp\":\"2023-12-05T10:27:32Z\",\"cc_details\":{\"cc_number\":5168830759303438,\"month\":12,\"year\":2025,\"holder_name\":\"John Doe\",\"cvc\":418}}",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer REPLACE_BEARER_TOKEN",
                "content-type: application/json"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://igw-demo.every-pay.com/api/v4/mobile_payments/card_details \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
              --header 'content-type: application/json' \
              --data '{"api_username":"a04e7ce1060e7024","token_consented":true,"timestamp":"2023-12-05T10:27:32Z","cc_details":{"cc_number":5168830759303438,"month":12,"year":2025,"holder_name":"John Doe","cvc":418}}'
  /v4/agreements:
    post:
      tags:
        - Agreements
      description: >
        A periodic/recurring Open Banking payment functionality allows merchants
        to automatically collect payments from customers on a regular basis
        (daily, weekly, monthly) without requiring customers to manually
        authorize each transaction.

        Payments are initiated and authorized using Strong Customer
        Authentication (SCA) only once, after which they are executed at regular
        intervals based on the provided start date, execution frequency, and end
        date.


        This endpoint is used to initiate periodic payment agreement.
      operationId: Initiate Periodic payment
      requestBody:
        content:
          application/json:
            schema:
              required:
                - account_name
                - amount
                - api_username
                - customer_url
                - customer_ip
                - nonce
                - order_reference
                - timestamp
                - frequency
                - start_date
              properties:
                structured_reference:
                  type: string
                  description: >-
                    Different formats in different countries. Used for Open
                    banking payments only
                  example: 5705872
                payment_description:
                  type: string
                  description: >
                    When this parameter is provided, it will be used with open
                    banking payment methods instead of the standard generated
                    description value.

                    With possible truncation due to payment method configuration
                    and transliteration requirements we recommend to use 65
                    chars when sending the payment description field.


                    Allowed characters: [a-zA-Z0-9/-?:().,'+]
                  example: example.com 84005a6c
                account_name:
                  type: string
                  description: >-
                    Processing account used for the payment. Most importantly,
                    this will determine available payment methods and currency
                    of the payment
                  example: EUR3D1
                nonce:
                  type: string
                  description: Random string used for detecting duplicate requests
                  example: 165784ab51fkm
                timestamp:
                  type: string
                  description: >-
                    A timestamp of request's creation time. The request must be
                    in an allowed time-window (±5 minutes). Must use ISO 8601
                    standard format
                  format: date-time
                  example: '2023-12-05T10:27:32Z'
                amount:
                  type: number
                  description: >-
                    Transaction amount, use decimal number with 2 digit
                    precision. The currency is taken from the specified
                    processing account. Can not be set to 0
                  format: float
                  example: 0.05
                order_reference:
                  type: string
                  description: >
                    Merchant's order reference. Uniqueness requirements can be
                    configured in Portal. Maximum length is 120 characters

                    for Open Banking payments, unless otherwise defined by
                    Acquirer bank/host.


                    Allowed characters: [a-zA-Z0-9/-?:().,'+]
                  example: 84005a6c
                frequency:
                  type: string
                  description: Valid periodicities for recurring payments
                  enum:
                    - daily
                    - weekly
                    - monthly
                  example: monthly
                start_date:
                  type: string
                  description: >-
                    The first applicable day of execution starting from this
                    date is the first payment. The content is date in ISODate
                    Format, e.g. 2024-10-30. Can not be today. Execution date
                    can not be past and is max 1 year in the future
                  example: '2024-10-30'
                end_date:
                  type: string
                  description: >-
                    The last applicable day of execution. If not given, it is an
                    infinite standing order. The content is date in ISODate
                    Format, e.g. 2030-10-30
                  example: '2030-10-30'
                email:
                  type: string
                  description: |
                    Customer's email. Used for fraud prevention

                    Character limit 255
                  example: example@gmail.com
                customer_ip:
                  type: string
                  description: >-
                    Customer's IP address. Used for fraud prevention. Do not set
                    this to fixed value, e.g Merchant's server, as this will
                    start generating false positives in fraud check
                  example: 53.62.137.190
                customer_url:
                  type: string
                  description: >-
                    URL where the Customer should be redirected after completing
                    the payment. `payment_reference` and `order_reference`
                    parameters are added when a customer is redirected to
                    `customer_url`. Customer URL has to be a fully qualified
                    domain name, it is not possible to use an IP address or
                    localhost
                  example: https://example.com
                locale:
                  type: string
                  description: >
                    A locale that should be used as the default for the payment
                    page. Customer's can change it via drop-down menu. Default
                    value `en`


                    Accepted values:

                    - `en` - English

                    - `cz` - Czech

                    - `da` - Danish

                    - `nl` - Dutch

                    - `et` - Estonian

                    - `fi` - Finnish

                    - `fr` - French

                    - `de` - German

                    - `hu` - Hungarian

                    - `it` - Italian

                    - `lv` - Latvian

                    - `lt` - Lithuanian

                    - `no` - Norwegian

                    - `pl` - Polish

                    - `pt` - Portuguese

                    - `ru` - Russian

                    - `sk` - Slovak

                    - `es` - Spanish

                    - `sv` - Swedish

                    - `uk` - Ukrainian


                    **Note**: User's previous preference overrides the locale
                    requested by the merchant
                  example: et
                api_username:
                  type: string
                  description: >-
                    The API username of the Merchant sending the request. Must
                    match with username in the Authorization HTTP header (16
                    characters)
                  example: a04e7ce1060e7024
                preferred_country:
                  type: string
                  description: >-
                    Default country for the payment page Open Banking payment
                    method selection
                  enum:
                    - EE
                    - LV
                    - LT
                  example: EE
                billing_city:
                  type: string
                  description: Cardholder billing address city. Character limit 255
                  example: Tallinn
                billing_country:
                  type: string
                  description: 'Cardholder billing address country. Format: ISO alpha-2'
                  example: EE
                billing_line1:
                  type: string
                  description: Cardholder billing address line 1. Character limit 255
                  example: Tartu mnt 2
                billing_line2:
                  type: string
                  description: Cardholder Billing address line 2. Character limit 255
                  example: null
                billing_line3:
                  type: string
                  description: Cardholder Billing address line 3. Character limit 255
                  example: null
                billing_postcode:
                  type: string
                  description: Cardholder billing address postal code. Character limit 255
                  example: 10145
                billing_state:
                  type: string
                  description: 'Cardholder billing address state. Format: ISO 3166-2'
                  example: EE-37
                shipping_city:
                  type: string
                  description: >-
                    Cardholder shipping address city. It will be sent if
                    available. Character limit 255
                  example: Tallinn
                shipping_country:
                  type: string
                  description: >-
                    Cardholder shipping address country. It will be sent if
                    available. Format: ISO alpha-2
                  example: EE
                shipping_line1:
                  type: string
                  description: >-
                    Cardholder shipping address line 1. It will be sent if
                    available. Character limit 255
                  example: Tartu mnt 2
                shipping_line2:
                  type: string
                  description: >-
                    Cardholder shipping address line 2. It will be sent if
                    available. Character limit 255
                  example: null
                shipping_line3:
                  type: string
                  description: >-
                    Cardholder shipping address line 3. It will be sent if
                    available. Character limit 255
                  example: null
                shipping_postcode:
                  type: string
                  description: >-
                    Cardholder shipping address postal code. It will be sent if
                    available. Character limit 255
                  example: 10145
                shipping_state:
                  type: string
                  description: >-
                    Cardholder shipping address state. It will be sent if
                    available. Character limit 255
                  example: EE-37
                integration_details:
                  type: object
                  description: Details of integration
                  properties:
                    integration:
                      type: string
                      description: Type of integration
                      example: Custom
                    software:
                      type: string
                      description: The name of the software
                      example: eCommerce
                    version:
                      type: string
                      description: Version number of the integration software
                      example: 2.1
      responses:
        '201':
          description: Initiate periodic payment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_V4_Entities_AgreementPostResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_ErrorResponse_400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_ErrorResponse_401'
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://igw-demo.every-pay.com/api/v4/agreements';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Basic REPLACE_BASIC_AUTH', 'content-type': 'application/json'},
              body: '{"structured_reference":5705872,"payment_description":"example.com 84005a6c","account_name":"EUR3D1","nonce":"165784ab51fkm","timestamp":"2023-12-05T10:27:32Z","amount":0.05,"order_reference":"84005a6c","frequency":"monthly","start_date":"2024-10-30","end_date":"2030-10-30","email":"example@gmail.com","customer_ip":"53.62.137.190","customer_url":"https://example.com","locale":"et","api_username":"a04e7ce1060e7024","preferred_country":"EE","billing_city":"Tallinn","billing_country":"EE","billing_line1":"Tartu mnt 2","billing_line2":null,"billing_line3":null,"billing_postcode":10145,"billing_state":"EE-37","shipping_city":"Tallinn","shipping_country":"EE","shipping_line1":"Tartu mnt 2","shipping_line2":null,"shipping_line3":null,"shipping_postcode":10145,"shipping_state":"EE-37","integration_details":{"integration":"Custom","software":"eCommerce","version":2.1}}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'

            require 'openssl'


            url = URI("https://igw-demo.every-pay.com/api/v4/agreements")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["Authorization"] = 'Basic REPLACE_BASIC_AUTH'

            request["content-type"] = 'application/json'

            request.body =
            "{\"structured_reference\":5705872,\"payment_description\":\"example.com
            84005a6c\",\"account_name\":\"EUR3D1\",\"nonce\":\"165784ab51fkm\",\"timestamp\":\"2023-12-05T10:27:32Z\",\"amount\":0.05,\"order_reference\":\"84005a6c\",\"frequency\":\"monthly\",\"start_date\":\"2024-10-30\",\"end_date\":\"2030-10-30\",\"email\":\"example@gmail.com\",\"customer_ip\":\"53.62.137.190\",\"customer_url\":\"https://example.com\",\"locale\":\"et\",\"api_username\":\"a04e7ce1060e7024\",\"preferred_country\":\"EE\",\"billing_city\":\"Tallinn\",\"billing_country\":\"EE\",\"billing_line1\":\"Tartu
            mnt
            2\",\"billing_line2\":null,\"billing_line3\":null,\"billing_postcode\":10145,\"billing_state\":\"EE-37\",\"shipping_city\":\"Tallinn\",\"shipping_country\":\"EE\",\"shipping_line1\":\"Tartu
            mnt
            2\",\"shipping_line2\":null,\"shipping_line3\":null,\"shipping_postcode\":10145,\"shipping_state\":\"EE-37\",\"integration_details\":{\"integration\":\"Custom\",\"software\":\"eCommerce\",\"version\":2.1}}"


            response = http.request(request)

            puts response.read_body
        - lang: Php
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://igw-demo.every-pay.com/api/v4/agreements",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"structured_reference\":5705872,\"payment_description\":\"example.com 84005a6c\",\"account_name\":\"EUR3D1\",\"nonce\":\"165784ab51fkm\",\"timestamp\":\"2023-12-05T10:27:32Z\",\"amount\":0.05,\"order_reference\":\"84005a6c\",\"frequency\":\"monthly\",\"start_date\":\"2024-10-30\",\"end_date\":\"2030-10-30\",\"email\":\"example@gmail.com\",\"customer_ip\":\"53.62.137.190\",\"customer_url\":\"https://example.com\",\"locale\":\"et\",\"api_username\":\"a04e7ce1060e7024\",\"preferred_country\":\"EE\",\"billing_city\":\"Tallinn\",\"billing_country\":\"EE\",\"billing_line1\":\"Tartu mnt 2\",\"billing_line2\":null,\"billing_line3\":null,\"billing_postcode\":10145,\"billing_state\":\"EE-37\",\"shipping_city\":\"Tallinn\",\"shipping_country\":\"EE\",\"shipping_line1\":\"Tartu mnt 2\",\"shipping_line2\":null,\"shipping_line3\":null,\"shipping_postcode\":10145,\"shipping_state\":\"EE-37\",\"integration_details\":{\"integration\":\"Custom\",\"software\":\"eCommerce\",\"version\":2.1}}",
              CURLOPT_HTTPHEADER => [
                "Authorization: Basic REPLACE_BASIC_AUTH",
                "content-type: application/json"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://igw-demo.every-pay.com/api/v4/agreements \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --header 'content-type: application/json' \
              --data '{"structured_reference":5705872,"payment_description":"example.com 84005a6c","account_name":"EUR3D1","nonce":"165784ab51fkm","timestamp":"2023-12-05T10:27:32Z","amount":0.05,"order_reference":"84005a6c","frequency":"monthly","start_date":"2024-10-30","end_date":"2030-10-30","email":"example@gmail.com","customer_ip":"53.62.137.190","customer_url":"https://example.com","locale":"et","api_username":"a04e7ce1060e7024","preferred_country":"EE","billing_city":"Tallinn","billing_country":"EE","billing_line1":"Tartu mnt 2","billing_line2":null,"billing_line3":null,"billing_postcode":10145,"billing_state":"EE-37","shipping_city":"Tallinn","shipping_country":"EE","shipping_line1":"Tartu mnt 2","shipping_line2":null,"shipping_line3":null,"shipping_postcode":10145,"shipping_state":"EE-37","integration_details":{"integration":"Custom","software":"eCommerce","version":2.1}}'
  /v4/agreements/{agreement_reference}:
    get:
      tags:
        - Agreements
      description: >
        This endpoint retrieves the current state of the agreement. It should be
        checked whenever a Callback is received to obtain the latest

        information about the agreement and update the customer accordingly.
      operationId: Get agreement status
      parameters:
        - name: api_username
          in: query
          description: >-
            The API username of the Merchant sending the request. Must match
            with username in the Authorization HTTP header (16 characters)
          required: true
          schema:
            type: string
        - name: agreement_reference
          in: path
          description: Reference ID of the agreement
          required: true
          schema:
            type: string
        - name: detailed
          in: query
          description: >-
            Boolean to indicate that payment result should return fraud check
            details. Valid values: `true`, `false`
          schema:
            type: boolean
      responses:
        '200':
          description: Get payment state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_V4_Entities_AgreementStatusResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_ErrorResponse'
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://igw-demo.every-pay.com/api/v4/agreements/%7Bagreement_reference%7D?api_username=SOME_STRING_VALUE&detailed=SOME_BOOLEAN_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Basic
            REPLACE_BASIC_AUTH'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'

            require 'openssl'


            url =
            URI("https://igw-demo.every-pay.com/api/v4/agreements/%7Bagreement_reference%7D?api_username=SOME_STRING_VALUE&detailed=SOME_BOOLEAN_VALUE")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["Authorization"] = 'Basic REPLACE_BASIC_AUTH'


            response = http.request(request)

            puts response.read_body
        - lang: Php
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://igw-demo.every-pay.com/api/v4/agreements/%7Bagreement_reference%7D?api_username=SOME_STRING_VALUE&detailed=SOME_BOOLEAN_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => [
                "Authorization: Basic REPLACE_BASIC_AUTH"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://igw-demo.every-pay.com/api/v4/agreements/%7Bagreement_reference%7D?api_username=SOME_STRING_VALUE&detailed=SOME_BOOLEAN_VALUE' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
    delete:
      tags:
        - Agreements
      description: >
        This endpoint is used to cancel a previously successfully signed
        Periodic Payment agreement. Merchant can use this functionality to stop
        receiving future payments from PSU previously signed Periodic Payments
        agreement.

        Note that not all PSU banks support this feature, and in order to cancel
        the periodic payments the agreement should be canceled from PSU internet
        bank.
      operationId: Delete agreement
      parameters:
        - name: api_username
          in: query
          description: >-
            The API username of the Merchant sending the request. Must match
            with username in the Authorization HTTP header (16 characters)
          required: true
          schema:
            type: string
        - name: agreement_reference
          in: path
          description: Reference ID of the agreement
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Get payment state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_V4_Entities_AgreementDeleteResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_ErrorResponse'
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://igw-demo.every-pay.com/api/v4/agreements/%7Bagreement_reference%7D?api_username=SOME_STRING_VALUE';


            let options = {method: 'DELETE', headers: {Authorization: 'Basic
            REPLACE_BASIC_AUTH'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'

            require 'openssl'


            url =
            URI("https://igw-demo.every-pay.com/api/v4/agreements/%7Bagreement_reference%7D?api_username=SOME_STRING_VALUE")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Delete.new(url)

            request["Authorization"] = 'Basic REPLACE_BASIC_AUTH'


            response = http.request(request)

            puts response.read_body
        - lang: Php
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://igw-demo.every-pay.com/api/v4/agreements/%7Bagreement_reference%7D?api_username=SOME_STRING_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => [
                "Authorization: Basic REPLACE_BASIC_AUTH"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url 'https://igw-demo.every-pay.com/api/v4/agreements/%7Bagreement_reference%7D?api_username=SOME_STRING_VALUE' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /v4/refunds/revert:
    post:
      x-api-variant:
        - seb
      tags:
        - Refunds
      description: >-
        Revert a payment refund. This action changes the payment state back to
        settled and adjusts the standing amount accordingly
      operationId: Revert refund
      requestBody:
        content:
          application/json:
            schema:
              required:
                - api_username
                - nonce
                - payment_reference
                - timestamp
                - transaction_reference
              properties:
                api_username:
                  type: string
                  description: >-
                    The API username of the Merchant sending the request. Must
                    match with username in the Authorization HTTP header (16
                    characters)
                  example: a04e7ce1060e7024
                payment_reference:
                  type: string
                  description: Unique reference ID of the payment
                  example: >-
                    0a887489dd023f1affd5dd0735a9766415c96d9314b738da8c7117e24216d62a
                transaction_reference:
                  type: string
                  description: Transaction reference for the refund
                  example: >-
                    81f786b48efc15a34289c8768140a32356677575c3350a45c7730750ac20a463
                timestamp:
                  type: string
                  description: >-
                    A timestamp of request's creation time. The request must be
                    in an allowed time-window (±5 minutes). Must use ISO 8601
                    standard format
                  format: date-time
                  example: '2023-12-05T10:27:32Z'
                nonce:
                  type: string
                  description: Random string used for detecting duplicate requests
                  example: 165784ab51fkm
        required: true
      responses:
        '201':
          description: Revert a payment refund
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_V4_Entities_RevertRefundResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_ErrorResponse_400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_ErrorResponse_401'
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://igw-demo.every-pay.com/api/v4/refunds/revert';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Basic REPLACE_BASIC_AUTH', 'content-type': 'application/json'},
              body: '{"api_username":"a04e7ce1060e7024","payment_reference":"0a887489dd023f1affd5dd0735a9766415c96d9314b738da8c7117e24216d62a","transaction_reference":"81f786b48efc15a34289c8768140a32356677575c3350a45c7730750ac20a463","timestamp":"2023-12-05T10:27:32Z","nonce":"165784ab51fkm"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'

            require 'openssl'


            url = URI("https://igw-demo.every-pay.com/api/v4/refunds/revert")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["Authorization"] = 'Basic REPLACE_BASIC_AUTH'

            request["content-type"] = 'application/json'

            request.body =
            "{\"api_username\":\"a04e7ce1060e7024\",\"payment_reference\":\"0a887489dd023f1affd5dd0735a9766415c96d9314b738da8c7117e24216d62a\",\"transaction_reference\":\"81f786b48efc15a34289c8768140a32356677575c3350a45c7730750ac20a463\",\"timestamp\":\"2023-12-05T10:27:32Z\",\"nonce\":\"165784ab51fkm\"}"


            response = http.request(request)

            puts response.read_body
        - lang: Php
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://igw-demo.every-pay.com/api/v4/refunds/revert",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"api_username\":\"a04e7ce1060e7024\",\"payment_reference\":\"0a887489dd023f1affd5dd0735a9766415c96d9314b738da8c7117e24216d62a\",\"transaction_reference\":\"81f786b48efc15a34289c8768140a32356677575c3350a45c7730750ac20a463\",\"timestamp\":\"2023-12-05T10:27:32Z\",\"nonce\":\"165784ab51fkm\"}",
              CURLOPT_HTTPHEADER => [
                "Authorization: Basic REPLACE_BASIC_AUTH",
                "content-type: application/json"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://igw-demo.every-pay.com/api/v4/refunds/revert \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --header 'content-type: application/json' \
              --data '{"api_username":"a04e7ce1060e7024","payment_reference":"0a887489dd023f1affd5dd0735a9766415c96d9314b738da8c7117e24216d62a","transaction_reference":"81f786b48efc15a34289c8768140a32356677575c3350a45c7730750ac20a463","timestamp":"2023-12-05T10:27:32Z","nonce":"165784ab51fkm"}'
  /v4/refunds/xml_payment_file:
    post:
      x-api-variant:
        - seb
      tags:
        - Refunds
      description: >-
        Export an XML refund file containing a list of marked refunded Open
        Banking payments to upload to the SEB system for processing
      operationId: Export refund XML
      requestBody:
        content:
          application/json:
            schema:
              required:
                - api_username
                - transaction_references
              properties:
                api_username:
                  type: string
                  description: >-
                    The API username of the Merchant sending the request. Must
                    match with username in the Authorization HTTP header (16
                    characters)
                  example: a04e7ce1060e7024
                transaction_references:
                  type: string
                  description: List transaction references separated by comma
                  example: >-
                    81f786b48efc15a34289c8768140a32356677575c3350a45c7730750ac20a463
        required: true
      responses:
        '201':
          description: Export an XML refund file
          content: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_ErrorResponse_400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_ErrorResponse_401'
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://igw-demo.every-pay.com/api/v4/refunds/xml_payment_file';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Basic REPLACE_BASIC_AUTH', 'content-type': 'application/json'},
              body: '{"api_username":"a04e7ce1060e7024","transaction_references":"81f786b48efc15a34289c8768140a32356677575c3350a45c7730750ac20a463"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'

            require 'openssl'


            url =
            URI("https://igw-demo.every-pay.com/api/v4/refunds/xml_payment_file")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["Authorization"] = 'Basic REPLACE_BASIC_AUTH'

            request["content-type"] = 'application/json'

            request.body =
            "{\"api_username\":\"a04e7ce1060e7024\",\"transaction_references\":\"81f786b48efc15a34289c8768140a32356677575c3350a45c7730750ac20a463\"}"


            response = http.request(request)

            puts response.read_body
        - lang: Php
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://igw-demo.every-pay.com/api/v4/refunds/xml_payment_file",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"api_username\":\"a04e7ce1060e7024\",\"transaction_references\":\"81f786b48efc15a34289c8768140a32356677575c3350a45c7730750ac20a463\"}",
              CURLOPT_HTTPHEADER => [
                "Authorization: Basic REPLACE_BASIC_AUTH",
                "content-type: application/json"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://igw-demo.every-pay.com/api/v4/refunds/xml_payment_file \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --header 'content-type: application/json' \
              --data '{"api_username":"a04e7ce1060e7024","transaction_references":"81f786b48efc15a34289c8768140a32356677575c3350a45c7730750ac20a463"}'
  /v4/tokens/{token}/status:
    get:
      tags:
        - Tokens
      description: Retrieve the status of the token
      operationId: Get token status
      parameters:
        - name: api_username
          in: query
          description: >-
            The API username of the Merchant sending the request. Must match
            with username in the Authorization HTTP header (16 characters)
          required: true
          schema:
            type: string
        - name: token
          in: path
          description: >-
            Instrument token which is returned in
            `/payments/{payment_reference}` response
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Get token status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_V4_Entities_InstrumentTokenResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_ErrorResponse_400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_ErrorResponse_401'
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://igw-demo.every-pay.com/api/v4/tokens/%7Btoken%7D/status?api_username=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Basic
            REPLACE_BASIC_AUTH'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'

            require 'openssl'


            url =
            URI("https://igw-demo.every-pay.com/api/v4/tokens/%7Btoken%7D/status?api_username=SOME_STRING_VALUE")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["Authorization"] = 'Basic REPLACE_BASIC_AUTH'


            response = http.request(request)

            puts response.read_body
        - lang: Php
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://igw-demo.every-pay.com/api/v4/tokens/%7Btoken%7D/status?api_username=SOME_STRING_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => [
                "Authorization: Basic REPLACE_BASIC_AUTH"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://igw-demo.every-pay.com/api/v4/tokens/%7Btoken%7D/status?api_username=SOME_STRING_VALUE' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /v4/tokens/delete:
    post:
      tags:
        - Tokens
      description: This endpoint is used to deactivate tokens
      operationId: Deactivate token
      requestBody:
        content:
          application/json:
            schema:
              required:
                - api_username
                - token
              properties:
                api_username:
                  type: string
                  description: >-
                    The API username of the Merchant sending the request. Must
                    match with username in the Authorization HTTP header (16
                    characters)
                  example: a04e7ce1060e7024
                token:
                  type: string
                  description: >-
                    Instrument token which is returned in
                    `/payments/{payment_reference}` response
                  example: bd7bc8e61b2g3f5831k0c2m9
        required: true
      responses:
        '201':
          description: Delete token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_V4_Entities_SchemaTokenResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_ErrorResponse_400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_ErrorResponse_401'
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://igw-demo.every-pay.com/api/v4/tokens/delete';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Basic REPLACE_BASIC_AUTH', 'content-type': 'application/json'},
              body: '{"api_username":"a04e7ce1060e7024","token":"bd7bc8e61b2g3f5831k0c2m9"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'

            require 'openssl'


            url = URI("https://igw-demo.every-pay.com/api/v4/tokens/delete")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["Authorization"] = 'Basic REPLACE_BASIC_AUTH'

            request["content-type"] = 'application/json'

            request.body =
            "{\"api_username\":\"a04e7ce1060e7024\",\"token\":\"bd7bc8e61b2g3f5831k0c2m9\"}"


            response = http.request(request)

            puts response.read_body
        - lang: Php
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://igw-demo.every-pay.com/api/v4/tokens/delete",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"api_username\":\"a04e7ce1060e7024\",\"token\":\"bd7bc8e61b2g3f5831k0c2m9\"}",
              CURLOPT_HTTPHEADER => [
                "Authorization: Basic REPLACE_BASIC_AUTH",
                "content-type: application/json"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://igw-demo.every-pay.com/api/v4/tokens/delete \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --header 'content-type: application/json' \
              --data '{"api_username":"a04e7ce1060e7024","token":"bd7bc8e61b2g3f5831k0c2m9"}'

